import "../common";
import "./function.tsp";
import "./integration.tsp";
import "./system.tsp";
import "./api_call.tsp";

using Common;

namespace Tools;

//
// TOOL MODELS
//

enum ToolType {
    /** A tool that emulates a function call */
    function,

    /** A tool that uses one of the Julep integrations */
    integration,

    /** A tool that uses a system resource */
    system,

    /** A tool that makes an API call */
    api_call,
}

alias ToolOutput = Record<unknown>;

alias ToolChoiceOption = "auto" | "none" | NamedToolChoice;

model Tool {
    /** Name of the tool (must be unique for this agent and a valid python identifier string )*/
    name: validPythonIdentifier;

    /** Description of the tool */
    description?: string;

    /** The function to call */
    function?: FunctionDef;

    /** The integration to call */
    integration?: IntegrationDef;

    /** The system to call */
    system?: SystemDef;

    /** The API call to make */
    api_call?: ApiCallDef;

    ...HasTimestamps;
    ...HasId;
}

model NamedToolChoice {
    function?: FunctionCallOption;
    integration?: never;
    system?: never;
    api_call?: never;
}

model ToolResponse {
    @key id: uuid;

    /** The output of the tool */
    output: ToolOutput;
}

/** Payload for creating a tool */
@withVisibility("create")
model CreateToolRequest {
    ...Tool;
}

/** Payload for updating a tool */
@withVisibility("update")
model UpdateToolRequest {
    ...Tool;
}

/** Payload for patching a tool */
model PatchToolRequest is UpdateToolRequest {}

/** The response tool value generated by the model */
@discriminator("type")
model ChosenToolCall {
    /** Whether this tool is a `function`, `api_call`, `system` etc. (Only `function` tool supported right now) */
    type: ToolType;

    function?: FunctionCallOption;
    integration?: never;
    system?: never;
    api_call?: never;

    ...HasId;
}

model ChosenFunctionCall extends ChosenToolCall {
    type: ToolType.function;

    /** The function to call */
    function: FunctionCallOption;
}
