import "../common";
import "../sessions";
import "../tools";

using Common;
using Sessions;
using Tools;

namespace Entries;

//
// ENTRY MODELS
//

/** Image detail level */
enum ImageDetail {
    low,
    high,
    auto,
}

/** ChatML role (system|assistant|user|function_call|function|function_response|auto) */
enum ChatMLRole {
    user,
    agent,
    system,
    function,
    function_response,
    function_call,
    auto,
}

model ImageURL {
    /** Image URL or base64 data url (e.g. `data:image/jpeg;base64,<the base64 encoded image>`) */
    @format("uri")
    url: string;

    /** The detail level of the image */
    detail: ImageDetail = ImageDetail.auto;
}

model ChatMLTextContentPart {
    text: string;

    /** The type (fixed to 'text') */
    type: "text" = "text";
}

model ChatMLImageContentPart {
    /** The image URL */
    image_url: ImageURL;

    /** The type (fixed to 'image_url') */
    type: "image_url" = "image_url";
}

alias ChatMLContentPart = ChatMLTextContentPart | ChatMLImageContentPart;

model ChatMLMessage {
    /** The role of the message */
    role: ChatMLRole;

    /** The content parts of the message */
    content: string | string[] | ChatMLContentPart[];

    /** Name */
    name?: string;

    /** Whether to continue this message or return a new one */
    @visibility("create")
    continue?: boolean;

    /** Tool calls generated by the model. */
    @visibility("read")
    tool_calls: ChosenToolCall[] = #[];

    ...HasCreatedAt;
    ...HasId;
}

@withVisibility("create")
model InputChatMLMessage {
    ...ChatMLMessage;
}

alias EntryContent = ChatMLContentPart[] | Tool | ChosenToolCall | string | ToolResponse;

model Entry {
    role: ChatMLRole;
    name: string | null = null;
    content: EntryContent | EntryContent[];
    source: entrySource;

    /** This is the time that this event refers to. */
    @minValue(0)
    timestamp: float;
    
    /** This is the time it was added to the database */
    ...HasCreatedAt;
    ...HasId;
}

model Relation {
    head: uuid;
    relation: string;
    tail: uuid;
}

model History {
    entries: Entry[];
    relations: Relation[];
    session_id: Session.id;

    ...HasCreatedAt;
}