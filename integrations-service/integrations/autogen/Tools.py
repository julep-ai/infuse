# generated by datamodel-codegen:
#   filename:  openapi-1.0.0.yaml

from __future__ import annotations

from typing import Annotated, Any, Literal
from uuid import UUID

from pydantic import AnyUrl, AwareDatetime, BaseModel, ConfigDict, Field, StrictBool


class ApiCallDef(BaseModel):
    """
    API call definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    method: Literal[
        "GET", "POST", "PUT", "DELETE", "PATCH", "HEAD", "OPTIONS", "CONNECT", "TRACE"
    ]
    """
    The HTTP method to use
    """
    url: AnyUrl
    """
    The URL to call
    """
    headers: dict[str, str] | None = None
    """
    The headers to send with the request
    """
    content: str | None = None
    """
    The content as base64 to send with the request
    """
    data: dict[str, Any] | None = None
    """
    The data to send as form data
    """
    json_: Annotated[dict[str, Any] | None, Field(alias="json")] = None
    """
    JSON body to send with the request
    """
    cookies: dict[str, str] | None = None
    """
    Cookies
    """
    params: str | dict[str, Any] | None = None
    """
    The parameters to send with the request
    """
    follow_redirects: StrictBool | None = None
    """
    Follow redirects
    """
    timeout: int | None = None
    """
    The timeout for the request
    """


class ApiCallDefUpdate(BaseModel):
    """
    API call definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    method: (
        Literal[
            "GET",
            "POST",
            "PUT",
            "DELETE",
            "PATCH",
            "HEAD",
            "OPTIONS",
            "CONNECT",
            "TRACE",
        ]
        | None
    ) = None
    """
    The HTTP method to use
    """
    url: AnyUrl | None = None
    """
    The URL to call
    """
    headers: dict[str, str] | None = None
    """
    The headers to send with the request
    """
    content: str | None = None
    """
    The content as base64 to send with the request
    """
    data: dict[str, Any] | None = None
    """
    The data to send as form data
    """
    json_: Annotated[dict[str, Any] | None, Field(alias="json")] = None
    """
    JSON body to send with the request
    """
    cookies: dict[str, str] | None = None
    """
    Cookies
    """
    params: str | dict[str, Any] | None = None
    """
    The parameters to send with the request
    """
    follow_redirects: StrictBool | None = None
    """
    Follow redirects
    """
    timeout: int | None = None
    """
    The timeout for the request
    """


class BaseIntegrationDef(BaseModel):
    """
    Integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    provider: Literal[
        "dummy", "weather", "wikipedia", "spider", "brave", "browserbase", "email"
    ]
    """
    The provider of the integration
    """
    method: str | None = None
    """
    The specific method of the integration to call
    """
    setup: Any | None = None
    """
    The setup parameters the integration accepts
    """
    arguments: Any | None = None
    """
    The arguments to pre-apply to the integration call
    """


class BaseIntegrationDefUpdate(BaseModel):
    """
    Integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    provider: (
        Literal[
            "dummy", "weather", "wikipedia", "spider", "brave", "browserbase", "email"
        ]
        | None
    ) = None
    """
    The provider of the integration
    """
    method: str | None = None
    """
    The specific method of the integration to call
    """
    setup: Any | None = None
    """
    The setup parameters the integration accepts
    """
    arguments: Any | None = None
    """
    The arguments to pre-apply to the integration call
    """


class BraveIntegrationDef(BaseIntegrationDef):
    """
    Brave integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    provider: Literal["brave"] = "brave"
    """
    The provider must be "brave"
    """
    method: str | None = None
    """
    The specific method of the integration to call
    """
    setup: BraveSearchSetup | None = None
    """
    The setup parameters for Brave
    """
    arguments: BraveSearchArguments | None = None
    """
    The arguments for Brave Search
    """


class BraveIntegrationDefUpdate(BaseIntegrationDefUpdate):
    """
    Brave integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    provider: Literal["brave"] = "brave"
    """
    The provider must be "brave"
    """
    method: str | None = None
    """
    The specific method of the integration to call
    """
    setup: BraveSearchSetupUpdate | None = None
    """
    The setup parameters for Brave
    """
    arguments: BraveSearchArgumentsUpdate | None = None
    """
    The arguments for Brave Search
    """


class BraveSearchArguments(BaseModel):
    """
    Arguments for Brave Search
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    query: str
    """
    The search query for searching with Brave
    """


class BraveSearchArgumentsUpdate(BaseModel):
    """
    Arguments for Brave Search
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    query: str | None = None
    """
    The search query for searching with Brave
    """


class BraveSearchSetup(BaseModel):
    """
    Integration definition for Brave Search
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    api_key: str
    """
    The api key for Brave Search
    """


class BraveSearchSetupUpdate(BaseModel):
    """
    Integration definition for Brave Search
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    api_key: str | None = None
    """
    The api key for Brave Search
    """


class ChosenToolCall(BaseModel):
    """
    The response tool value generated by the model
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal["function", "integration", "system", "api_call"]
    """
    Whether this tool is a `function`, `api_call`, `system` etc. (Only `function` tool supported right now)
    """
    function: FunctionCallOption | None = None
    id: Annotated[UUID, Field(json_schema_extra={"readOnly": True})]


class CreateToolRequest(BaseModel):
    """
    Payload for creating a tool
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: Annotated[str, Field(max_length=40, pattern="^[^\\W0-9]\\w*$")]
    """
    Name of the tool (must be unique for this agent and a valid python identifier string )
    """
    description: str | None = None
    """
    Description of the tool
    """
    function: FunctionDef | None = None
    """
    The function to call
    """
    integration: (
        DummyIntegrationDef
        | BraveIntegrationDef
        | EmailIntegrationDef
        | SpiderIntegrationDef
        | WikipediaIntegrationDef
        | WeatherIntegrationDef
        | None
    ) = None
    """
    The integration to call
    """
    system: SystemDef | None = None
    """
    The system to call
    """
    api_call: ApiCallDef | None = None
    """
    The API call to make
    """


class DummyIntegrationDef(BaseIntegrationDef):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    provider: Literal["dummy"] = "dummy"


class DummyIntegrationDefUpdate(BaseIntegrationDefUpdate):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    provider: Literal["dummy"] = "dummy"


class EmailArguments(BaseModel):
    """
    Arguments for Email sending
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    to: str
    """
    The email address to send the email to
    """
    from_: Annotated[str, Field(alias="from")]
    """
    The email address to send the email from
    """
    subject: str
    """
    The subject of the email
    """
    body: str
    """
    The body of the email
    """


class EmailArgumentsUpdate(BaseModel):
    """
    Arguments for Email sending
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    to: str | None = None
    """
    The email address to send the email to
    """
    from_: Annotated[str | None, Field(alias="from")] = None
    """
    The email address to send the email from
    """
    subject: str | None = None
    """
    The subject of the email
    """
    body: str | None = None
    """
    The body of the email
    """


class EmailIntegrationDef(BaseIntegrationDef):
    """
    Email integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    provider: Literal["email"] = "email"
    """
    The provider must be "email"
    """
    method: str | None = None
    """
    The specific method of the integration to call
    """
    setup: EmailSetup | None = None
    """
    The setup parameters for Email
    """
    arguments: EmailArguments | None = None
    """
    The arguments for Email sending
    """


class EmailIntegrationDefUpdate(BaseIntegrationDefUpdate):
    """
    Email integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    provider: Literal["email"] = "email"
    """
    The provider must be "email"
    """
    method: str | None = None
    """
    The specific method of the integration to call
    """
    setup: EmailSetupUpdate | None = None
    """
    The setup parameters for Email
    """
    arguments: EmailArgumentsUpdate | None = None
    """
    The arguments for Email sending
    """


class EmailSetup(BaseModel):
    """
    Setup parameters for Email integration
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    host: str
    """
    The host of the email server
    """
    port: int
    """
    The port of the email server
    """
    user: str
    """
    The username of the email server
    """
    password: str
    """
    The password of the email server
    """


class EmailSetupUpdate(BaseModel):
    """
    Setup parameters for Email integration
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    host: str | None = None
    """
    The host of the email server
    """
    port: int | None = None
    """
    The port of the email server
    """
    user: str | None = None
    """
    The username of the email server
    """
    password: str | None = None
    """
    The password of the email server
    """


class FunctionCallOption(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: str
    """
    The name of the function
    """


class FunctionDef(BaseModel):
    """
    Function definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: Any | None = None
    """
    DO NOT USE: This will be overriden by the tool name. Here only for compatibility reasons.
    """
    description: Any | None = None
    """
    DO NOT USE: This will be overriden by the tool description. Here only for compatibility reasons.
    """
    parameters: dict[str, Any] | None = None
    """
    The parameters the function accepts
    """


class NamedToolChoice(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    function: FunctionCallOption | None = None


class PatchToolRequest(BaseModel):
    """
    Payload for patching a tool
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: Annotated[str | None, Field(max_length=40, pattern="^[^\\W0-9]\\w*$")] = None
    """
    Name of the tool (must be unique for this agent and a valid python identifier string )
    """
    description: str | None = None
    """
    Description of the tool
    """
    function: FunctionDef | None = None
    """
    The function to call
    """
    integration: (
        DummyIntegrationDefUpdate
        | BraveIntegrationDefUpdate
        | EmailIntegrationDefUpdate
        | SpiderIntegrationDefUpdate
        | WikipediaIntegrationDefUpdate
        | WeatherIntegrationDefUpdate
        | None
    ) = None
    """
    The integration to call
    """
    system: SystemDefUpdate | None = None
    """
    The system to call
    """
    api_call: ApiCallDefUpdate | None = None
    """
    The API call to make
    """


class SpiderFetchArguments(BaseModel):
    """
    Arguments for Spider integration
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    url: AnyUrl
    """
    The URL to fetch data from
    """
    mode: Literal["scrape"] = "scrape"
    """
    The type of crawler to use
    """
    params: dict[str, Any] | None = None
    """
    Additional parameters for the Spider API
    """


class SpiderFetchArgumentsUpdate(BaseModel):
    """
    Arguments for Spider integration
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    url: AnyUrl | None = None
    """
    The URL to fetch data from
    """
    mode: Literal["scrape"] = "scrape"
    """
    The type of crawler to use
    """
    params: dict[str, Any] | None = None
    """
    Additional parameters for the Spider API
    """


class SpiderIntegrationDef(BaseIntegrationDef):
    """
    Spider integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    provider: Literal["spider"] = "spider"
    """
    The provider must be "spider"
    """
    method: str | None = None
    """
    The specific method of the integration to call
    """
    setup: SpiderSetup | None = None
    """
    The setup parameters for Spider
    """
    arguments: SpiderFetchArguments | None = None
    """
    The arguments for Spider
    """


class SpiderIntegrationDefUpdate(BaseIntegrationDefUpdate):
    """
    Spider integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    provider: Literal["spider"] = "spider"
    """
    The provider must be "spider"
    """
    method: str | None = None
    """
    The specific method of the integration to call
    """
    setup: SpiderSetupUpdate | None = None
    """
    The setup parameters for Spider
    """
    arguments: SpiderFetchArgumentsUpdate | None = None
    """
    The arguments for Spider
    """


class SpiderSetup(BaseModel):
    """
    Setup parameters for Spider integration
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    spider_api_key: str
    """
    The API key for Spider
    """


class SpiderSetupUpdate(BaseModel):
    """
    Setup parameters for Spider integration
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    spider_api_key: str | None = None
    """
    The API key for Spider
    """


class SystemDef(BaseModel):
    """
    System definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    resource: Literal["agent", "user", "task", "execution", "doc", "session", "job"]
    """
    Resource is the name of the resource to use
    """
    operation: Literal[
        "create",
        "update",
        "patch",
        "create_or_update",
        "embed",
        "change_status",
        "search",
        "chat",
        "history",
        "delete",
        "get",
        "list",
    ]
    """
    Operation is the name of the operation to perform
    """
    resource_id: UUID | None = None
    """
    Resource id (if applicable)
    """
    subresource: Literal["tool", "doc", "execution", "transition"] | None = None
    """
    Sub-resource type (if applicable)
    """
    arguments: dict[str, Any] | None = None
    """
    The arguments to pre-apply to the system call
    """


class SystemDefUpdate(BaseModel):
    """
    System definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    resource: (
        Literal["agent", "user", "task", "execution", "doc", "session", "job"] | None
    ) = None
    """
    Resource is the name of the resource to use
    """
    operation: (
        Literal[
            "create",
            "update",
            "patch",
            "create_or_update",
            "embed",
            "change_status",
            "search",
            "chat",
            "history",
            "delete",
            "get",
            "list",
        ]
        | None
    ) = None
    """
    Operation is the name of the operation to perform
    """
    resource_id: UUID | None = None
    """
    Resource id (if applicable)
    """
    subresource: Literal["tool", "doc", "execution", "transition"] | None = None
    """
    Sub-resource type (if applicable)
    """
    arguments: dict[str, Any] | None = None
    """
    The arguments to pre-apply to the system call
    """


class Tool(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: Annotated[str, Field(max_length=40, pattern="^[^\\W0-9]\\w*$")]
    """
    Name of the tool (must be unique for this agent and a valid python identifier string )
    """
    description: str | None = None
    """
    Description of the tool
    """
    function: FunctionDef | None = None
    """
    The function to call
    """
    integration: (
        DummyIntegrationDef
        | BraveIntegrationDef
        | EmailIntegrationDef
        | SpiderIntegrationDef
        | WikipediaIntegrationDef
        | WeatherIntegrationDef
        | None
    ) = None
    """
    The integration to call
    """
    system: SystemDef | None = None
    """
    The system to call
    """
    api_call: ApiCallDef | None = None
    """
    The API call to make
    """
    created_at: Annotated[AwareDatetime, Field(json_schema_extra={"readOnly": True})]
    """
    When this resource was created as UTC date-time
    """
    updated_at: Annotated[AwareDatetime, Field(json_schema_extra={"readOnly": True})]
    """
    When this resource was updated as UTC date-time
    """
    id: Annotated[UUID, Field(json_schema_extra={"readOnly": True})]


class ToolResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: UUID
    output: dict[str, Any]
    """
    The output of the tool
    """


class UpdateToolRequest(BaseModel):
    """
    Payload for updating a tool
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: Annotated[str, Field(max_length=40, pattern="^[^\\W0-9]\\w*$")]
    """
    Name of the tool (must be unique for this agent and a valid python identifier string )
    """
    description: str | None = None
    """
    Description of the tool
    """
    function: FunctionDef | None = None
    """
    The function to call
    """
    integration: (
        DummyIntegrationDef
        | BraveIntegrationDef
        | EmailIntegrationDef
        | SpiderIntegrationDef
        | WikipediaIntegrationDef
        | WeatherIntegrationDef
        | None
    ) = None
    """
    The integration to call
    """
    system: SystemDef | None = None
    """
    The system to call
    """
    api_call: ApiCallDef | None = None
    """
    The API call to make
    """


class WeatherGetArguments(BaseModel):
    """
    Arguments for Weather
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    location: str
    """
    The location for which to fetch weather data
    """


class WeatherGetArgumentsUpdate(BaseModel):
    """
    Arguments for Weather
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    location: str | None = None
    """
    The location for which to fetch weather data
    """


class WeatherIntegrationDef(BaseIntegrationDef):
    """
    Weather integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    provider: Literal["weather"] = "weather"
    """
    The provider must be "weather"
    """
    method: str | None = None
    """
    The specific method of the integration to call
    """
    setup: WeatherSetup | None = None
    """
    The setup parameters for Weather
    """
    arguments: WeatherGetArguments | None = None
    """
    The arguments for Weather
    """


class WeatherIntegrationDefUpdate(BaseIntegrationDefUpdate):
    """
    Weather integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    provider: Literal["weather"] = "weather"
    """
    The provider must be "weather"
    """
    method: str | None = None
    """
    The specific method of the integration to call
    """
    setup: WeatherSetupUpdate | None = None
    """
    The setup parameters for Weather
    """
    arguments: WeatherGetArgumentsUpdate | None = None
    """
    The arguments for Weather
    """


class WeatherSetup(BaseModel):
    """
    Integration definition for Weather
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    openweathermap_api_key: str
    """
    The api key for OpenWeatherMap
    """


class WeatherSetupUpdate(BaseModel):
    """
    Integration definition for Weather
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    openweathermap_api_key: str | None = None
    """
    The api key for OpenWeatherMap
    """


class WikipediaIntegrationDef(BaseIntegrationDef):
    """
    Wikipedia integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    provider: Literal["wikipedia"] = "wikipedia"
    """
    The provider must be "wikipedia"
    """
    method: str | None = None
    """
    The specific method of the integration to call
    """
    setup: Any | None = None
    """
    The setup parameters for Wikipedia
    """
    arguments: WikipediaSearchArguments | None = None
    """
    The arguments for Wikipedia Search
    """


class WikipediaIntegrationDefUpdate(BaseIntegrationDefUpdate):
    """
    Wikipedia integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    provider: Literal["wikipedia"] = "wikipedia"
    """
    The provider must be "wikipedia"
    """
    method: str | None = None
    """
    The specific method of the integration to call
    """
    setup: Any | None = None
    """
    The setup parameters for Wikipedia
    """
    arguments: WikipediaSearchArgumentsUpdate | None = None
    """
    The arguments for Wikipedia Search
    """


class WikipediaSearchArguments(BaseModel):
    """
    Arguments for Wikipedia Search
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    query: str
    """
    The search query string
    """
    load_max_docs: Annotated[int, Field(ge=1, le=10)] = 2
    """
    Maximum number of documents to load
    """


class WikipediaSearchArgumentsUpdate(BaseModel):
    """
    Arguments for Wikipedia Search
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    query: str | None = None
    """
    The search query string
    """
    load_max_docs: Annotated[int, Field(ge=1, le=10)] = 2
    """
    Maximum number of documents to load
    """


class ChosenFunctionCall(ChosenToolCall):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal["function"] = "function"
    function: FunctionCallOption
    """
    The function to call
    """
