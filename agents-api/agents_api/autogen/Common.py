# generated by datamodel-codegen:
#   filename:  openapi-0.4.0.yaml

from __future__ import annotations

from typing import Annotated, Literal
from uuid import UUID

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field, RootModel


class IdentifierSafeUnicode(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: Annotated[
        str,
        Field(
            max_length=120,
            pattern="^[\\p{L}\\p{Nl}\\p{Pattern_Syntax}\\p{Pattern_White_Space}]+[\\p{ID_Start}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\p{Pattern_Syntax}\\p{Pattern_White_Space}]*$",
        ),
    ]
    """
    For Unicode character safety
    See: https://unicode.org/reports/tr31/
    See: https://www.unicode.org/reports/tr39/#Identifier_Characters
    """


class JinjaTemplate(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: str
    """
    A valid jinja template.
    """


class LogitBias(RootModel[float]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: Annotated[float, Field(ge=-100.0, le=100.0)]


class PaginationOptions(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    limit: Annotated[int, Field(100, ge=1, lt=1000)]
    """
    Limit the number of items returned
    """
    offset: Annotated[int, Field(0, ge=0)]
    """
    Offset the items returned
    """
    sort_by: Literal["created_at", "updated_at"] = "created_at"
    """
    Sort by a field
    """
    direction: Literal["asc", "desc"] = "asc"
    """
    Sort direction
    """
    metadata_filter: str = "{}"
    """
    JSON string of object that should be used to filter objects by metadata
    """


class PyExpression(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: str
    """
    A simple python expression compatible with SimpleEval.
    """


class ResourceCreatedResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: UUID
    """
    ID of created resource
    """
    created_at: Annotated[AwareDatetime, Field(json_schema_extra={"readOnly": True})]
    """
    When this resource was created as UTC date-time
    """
    jobs: Annotated[list[UUID], Field([], json_schema_extra={"readOnly": True})]
    """
    IDs (if any) of jobs created as part of this request
    """


class ResourceDeletedResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: UUID
    """
    ID of deleted resource
    """
    deleted_at: Annotated[AwareDatetime, Field(json_schema_extra={"readOnly": True})]
    """
    When this resource was deleted as UTC date-time
    """
    jobs: Annotated[list[UUID], Field([], json_schema_extra={"readOnly": True})]
    """
    IDs (if any) of jobs created as part of this request
    """


class ResourceUpdatedResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: UUID
    """
    ID of updated resource
    """
    updated_at: Annotated[AwareDatetime, Field(json_schema_extra={"readOnly": True})]
    """
    When this resource was updated as UTC date-time
    """
    jobs: Annotated[list[UUID], Field([], json_schema_extra={"readOnly": True})]
    """
    IDs (if any) of jobs created as part of this request
    """


class Uuid(RootModel[UUID]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: UUID


class ValidPythonIdentifier(RootModel[str]):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    root: Annotated[str, Field(max_length=40, pattern="^[^\\W0-9]\\w*$")]
    """
    Valid python identifier names
    """
