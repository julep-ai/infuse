# generated by datamodel-codegen:
#   filename:  openapi-0.4.0.yaml

from __future__ import annotations

from typing import Annotated, Any, Literal
from uuid import UUID

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field


class BaseDocSearchRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    confidence: Annotated[float, Field(0.5, ge=0.0, le=1.0)]
    """
    The confidence cutoff level
    """
    alpha: Annotated[float, Field(0.75, ge=0.0, le=1.0)]
    """
    The weight to apply to BM25 vs Vector search results. 0 => pure BM25; 1 => pure vector;
    """
    mmr: bool = False
    """
    Whether to include the MMR algorithm in the search. Optimizes for diversity in search results.
    """
    lang: Literal["en-US"] = "en-US"
    """
    The language to be used for text-only search. Support for other languages coming soon.
    """


class Doc(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Annotated[UUID, Field(json_schema_extra={"readOnly": True})]
    metadata: dict[str, Any] | None = None
    created_at: Annotated[AwareDatetime, Field(json_schema_extra={"readOnly": True})]
    """
    When this resource was created as UTC date-time
    """
    title: Annotated[
        str,
        Field(
            pattern="^[\\p{L}\\p{Nl}\\p{Pattern_Syntax}\\p{Pattern_White_Space}]+[\\p{ID_Start}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\p{Pattern_Syntax}\\p{Pattern_White_Space}]*$"
        ),
    ]
    """
    Title describing what this document contains
    """
    content: str | list[str]
    """
    Contents of the document
    """


class DocOwner(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: UUID
    role: Literal["user", "agent"]


class DocReference(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    owner: DocOwner
    """
    The owner of this document.
    """
    id: Annotated[UUID, Field(json_schema_extra={"readOnly": True})]
    """
    ID of the document
    """
    snippet_index: list[int]
    """
    Snippets referred to of the document
    """
    title: str | None = None
    snippet: str | None = None


class EmbedQueryRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    text: str | list[str]
    """
    Text or texts to embed
    """


class EmbedQueryResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    vectors: list[list[float]]
    """
    The embedded vectors
    """


class HybridDocSearchRequest(BaseDocSearchRequest):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    text: str | list[str]
    """
    Text or texts to use in the search. In `hybrid` search mode, either `text` or both `text` and `vector` fields are required.
    """
    vector: list[float] | list[list[float]]
    """
    Vector or vectors to use in the search. Must be the same dimensions as the embedding model or else an error will be thrown.
    """


class TextOnlyDocSearchRequest(BaseDocSearchRequest):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    text: str | list[str]
    """
    Text or texts to use in the search.
    """


class VectorDocSearchRequest(BaseDocSearchRequest):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    vector: list[float] | list[list[float]]
    """
    Vector or vectors to use in the search. Must be the same dimensions as the embedding model or else an error will be thrown.
    """
