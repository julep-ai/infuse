# generated by datamodel-codegen:
#   filename:  openapi-0.4.0.yaml
#   timestamp: 2024-07-15T21:17:24+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any, Dict, List, Literal
from uuid import UUID

from pydantic import AwareDatetime, BaseModel, Field


class Doc(BaseModel):
    id: Annotated[UUID, Field(json_schema_extra={"readOnly": True})]
    metadata: Dict[str, Any] | None = None
    created_at: Annotated[AwareDatetime, Field(json_schema_extra={"readOnly": True})]
    """
    When this resource was created as UTC date-time
    """
    title: Annotated[
        str,
        Field(
            pattern="^[\\p{L}\\p{Nl}\\p{Pattern_Syntax}\\p{Pattern_White_Space}]+[\\p{ID_Start}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\p{Pattern_Syntax}\\p{Pattern_White_Space}]*$"
        ),
    ]
    """
    Title describing what this document contains
    """
    content: str | List[str]
    """
    Contents of the document
    """


class Role(str, Enum):
    user = "user"
    agent = "agent"


class DocOwner(BaseModel):
    id: UUID
    role: Role


class DocReference(BaseModel):
    owner: DocOwner
    """
    The owner of this document.
    """
    id: Annotated[UUID, Field(json_schema_extra={"readOnly": True})]
    """
    ID of the document
    """
    snippet_index: List[int]
    """
    Snippets referred to of the document
    """
    title: str | None = None
    snippet: str | None = None


class Mode(str, Enum):
    """
    The search mode
    """

    vector = "vector"
    text = "text"
    hybrid = "hybrid"


class DocSearchRequest(BaseModel):
    text: str | List[str] | None = None
    vector: List[float] | List[List[float]] | None = None
    mode: Mode
    """
    The search mode
    """
    confidence: Annotated[float, Field(ge=0.0, le=1.0)]
    """
    The confidence cutoff level
    """
    alpha: Annotated[float, Field(ge=0.0, le=1.0)]
    """
    The weight to apply to BM25 vs Vector search results. 0 => pure BM25; 1 => pure vector;
    """
    mmr: bool
    """
    Whether to include the MMR algorithm in the search. Optimizes for diversity in search results.
    """
    lang: Literal["en-US"] = "en-US"
    """
    The language to be used for text-only search. Support for other languages coming soon.
    """


class HybridDocSearchRequest(DocSearchRequest):
    text: str | List[str] | None = None
    """
    Text or texts to use in the search. In `hybrid` search mode, either `text` or both `text` and `vector` fields are required.
    """
    vector: List[float] | List[List[float]] | None = None
    """
    Vector or vectors to use in the search. Must be the same dimensions as the embedding model or else an error will be thrown.
    """
    mode: Literal["hybrid"] = "hybrid"


class TextOnlyDocSearchRequest(DocSearchRequest):
    text: str | List[str]
    """
    Text or texts to use in the search. In `text` search mode, only BM25 is used.
    """
    mode: Literal["text"] = "text"


class VectorDocSearchRequest(DocSearchRequest):
    vector: List[float] | List[List[float]]
    """
    Vector or vectors to use in the search. Must be the same dimensions as the embedding model or else an error will be thrown.
    """
    mode: Literal["vector"] = "vector"
