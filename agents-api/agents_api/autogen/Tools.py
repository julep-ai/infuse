# generated by datamodel-codegen:
#   filename:  openapi-0.4.0.yaml

from __future__ import annotations

from typing import Annotated, Any, Literal
from uuid import UUID

from pydantic import AnyUrl, AwareDatetime, BaseModel, ConfigDict, Field, StrictBool

from .Common import PaginationOptions, ValidPythonIdentifier
from .Docs import (
    CreateDocRequest,
    EmbedQueryRequest,
    HybridDocSearchRequest,
    TextOnlyDocSearchRequest,
    VectorDocSearchRequest,
)
from .Executions import (
    CreateExecutionRequest,
    ResumeExecutionRequest,
    StopExecutionRequest,
)
from .Sessions import (
    CreateOrUpdateSessionRequest,
    CreateSessionRequest,
    PatchSessionRequest,
    UpdateSessionRequest,
)
from .Users import (
    CreateOrUpdateUserRequest,
    CreateUserRequest,
    PatchUserRequest,
    UpdateUserRequest,
)


class ApiCallDef(BaseModel):
    """
    API call definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    method: Literal["GET", "POST", "PUT", "DELETE", "PATCH", "HEAD", "OPTIONS"]
    """
    The HTTP method to use
    """
    url: AnyUrl
    """
    The URL to call
    """
    headers: dict[str, str] | None = None
    """
    The headers to send with the request
    """
    content: str | None = None
    """
    The content as base64 to send with the request
    """
    data: dict[str, Any] | None = None
    """
    The data to send as form data
    """
    json_: Annotated[dict[str, Any] | None, Field(None, alias="json")]
    """
    JSON body to send with the request
    """
    cookies: dict[str, str] | None = None
    """
    Cookies
    """
    params: str | dict[str, Any] | None = None
    """
    The parameters to send with the request
    """
    follow_redirects: StrictBool = False
    """
    Follow redirects
    """
    timeout: int | None = None
    """
    The timeout for the request
    """


class BaseSystemDef(BaseModel):
    """
    Base system definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    resource: Literal["agent", "user", "task", "execution", "doc", "session", "job"]
    """
    Resource is the name of the resource to use
    """
    resource_id: UUID | None = None
    """
    Resource id (if applicable)
    """
    subresource: UUID | None = None
    """
    Sub-resource type (if applicable)
    """
    operation: Literal[
        "create",
        "update",
        "patch",
        "create_or_update",
        "embed",
        "change_status",
        "search",
        "history",
        "delete",
        "get",
        "list",
    ]
    """
    Operation is the name of the operation to perform
    """
    arguments: Any | None = None
    """
    The arguments to pre-apply to the system call
    """


class ChosenToolCall(BaseModel):
    """
    The response tool value generated by the model
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal["function", "integration", "system", "api_call"]
    """
    Whether this tool is a `function`, `api_call`, `system` etc. (Only `function` tool supported right now)
    """
    function: FunctionCallOption | None = None
    id: Annotated[UUID, Field(json_schema_extra={"readOnly": True})]


class CreateToolRequest(BaseModel):
    """
    Payload for creating a tool
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: Annotated[str, Field(max_length=40, pattern="^[^\\W0-9]\\w*$")]
    """
    Name of the tool (must be unique for this agent and a valid python identifier string )
    """
    description: str | None = None
    """
    Description of the tool
    """
    function: FunctionDef | None = None
    """
    The function to call
    """
    integration: IntegrationDef | None = None
    """
    The integration to call
    """


class FunctionCallOption(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: Annotated[str, Field(max_length=40, pattern="^[^\\W0-9]\\w*$")]
    """
    The name of the function
    """


class FunctionDef(BaseModel):
    """
    Function definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: Any | None = None
    """
    DO NOT USE: This will be overriden by the tool name. Here only for compatibility reasons.
    """
    description: Any | None = None
    """
    DO NOT USE: This will be overriden by the tool description. Here only for compatibility reasons.
    """
    parameters: dict[str, Any] | None = None
    """
    The parameters the function accepts
    """


class IntegrationDef(BaseModel):
    """
    Integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    provider: (
        Literal[
            "dummy",
            "hacker_news",
            "weather",
            "wikipedia",
            "spider",
            "brave",
            "browserbase",
        ]
        | str
    )
    """
    The provider of the integration
    """
    method: str | None = None
    """
    The specific method of the integration to call
    """
    setup: dict[str, Any] | None = None
    """
    The setup parameters the integration accepts
    """
    arguments: dict[str, Any] | None = None
    """
    The arguments to pre-apply to the integration call
    """


class IntegrationDefUpdate(BaseModel):
    """
    Integration definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    provider: (
        Literal[
            "dummy",
            "hacker_news",
            "weather",
            "wikipedia",
            "spider",
            "brave",
            "browserbase",
        ]
        | str
        | None
    ) = None
    """
    The provider of the integration
    """
    method: str | None = None
    """
    The specific method of the integration to call
    """
    setup: dict[str, Any] | None = None
    """
    The setup parameters the integration accepts
    """
    arguments: dict[str, Any] | None = None
    """
    The arguments to pre-apply to the integration call
    """


class NamedToolChoice(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    function: FunctionCallOption | None = None


class PatchToolRequest(BaseModel):
    """
    Payload for patching a tool
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: Annotated[str | None, Field(None, max_length=40, pattern="^[^\\W0-9]\\w*$")]
    """
    Name of the tool (must be unique for this agent and a valid python identifier string )
    """
    description: str | None = None
    """
    Description of the tool
    """
    function: FunctionDef | None = None
    """
    The function to call
    """
    integration: IntegrationDefUpdate | None = None
    """
    The integration to call
    """


class SystemAgentDeleteDef(BaseSystemDef):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    resource: Literal["agent"] = "agent"
    operation: Literal["delete"] = "delete"
    resource_id: UUID


class SystemAgentGetDef(BaseSystemDef):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    resource: Literal["agent"] = "agent"
    operation: Literal["get"] = "get"
    resource_id: UUID


class SystemAgentListDef(BaseSystemDef):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    resource: Literal["agent"] = "agent"
    operation: Literal["list"] = "list"
    arguments: PaginationOptions


class SystemCreateToolRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: Annotated[str, Field(max_length=40, pattern="^[^\\W0-9]\\w*$")]
    """
    Name of the tool (must be unique for this agent and a valid python identifier string )
    """
    description: str | None = None
    """
    Description of the tool
    """
    function: FunctionDef | None = None
    """
    The function to call
    """
    integration: IntegrationDef | None = None
    """
    The integration to call
    """


class SystemDocCreateDef(BaseSystemDef):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    resource: Literal["agent", "user"] = "agent"
    resource_id: UUID
    subresource: Literal["doc"] = "doc"
    operation: Literal["create"] = "create"
    arguments: CreateDocRequest


class SystemDocDeleteDef(BaseSystemDef):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    resource: Literal["agent", "user"] = "agent"
    resource_id: UUID
    subresource: Literal["doc"] = "doc"
    operation: Literal["delete"] = "delete"


class SystemDocEmbedDef(BaseSystemDef):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    resource: Literal["doc"] = "doc"
    operation: Literal["embed"] = "embed"
    arguments: EmbedQueryRequest


class SystemDocGetDef(BaseSystemDef):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    resource: Literal["doc"] = "doc"
    resource_id: UUID
    operation: Literal["get"] = "get"


class SystemDocListDef(BaseSystemDef):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    resource: Literal["agent", "user"] = "agent"
    resource_id: UUID
    subresource: Literal["doc"] = "doc"
    operation: Literal["list"] = "list"
    arguments: PaginationOptions


class SystemDocSearchDef(BaseSystemDef):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    resource: Literal["agent", "user"] = "agent"
    resource_id: UUID
    subresource: Literal["doc"] = "doc"
    operation: Literal["search"] = "search"
    arguments: (
        VectorDocSearchRequest | TextOnlyDocSearchRequest | HybridDocSearchRequest
    )


class SystemExecutionChangeStatusDef(BaseSystemDef):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    resource: Literal["execution"] = "execution"
    resource_id: UUID
    operation: Literal["change_status"] = "change_status"
    arguments: ResumeExecutionRequest | StopExecutionRequest


class SystemExecutionCreateDef(BaseSystemDef):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    resource: Literal["task"] = "task"
    resource_id: UUID
    subresource: Literal["execution"] = "execution"
    operation: Literal["create"] = "create"
    arguments: CreateExecutionRequest


class SystemExecutionGetDef(BaseSystemDef):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    resource: Literal["execution"] = "execution"
    resource_id: UUID
    operation: Literal["get"] = "get"


class SystemExecutionListDef(BaseSystemDef):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    resource: Literal["task"] = "task"
    resource_id: UUID
    subresource: Literal["execution"] = "execution"
    operation: Literal["list"] = "list"
    arguments: PaginationOptions


class SystemJobGetDef(BaseSystemDef):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    resource: Literal["job"] = "job"
    resource_id: UUID
    operation: Literal["get"] = "get"


class SystemPatchToolRequest(SystemCreateToolRequest):
    pass


class SystemSessionCreateDef(BaseSystemDef):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    resource: Literal["session"] = "session"
    resource_id: UUID
    operation: Literal["create"] = "create"
    arguments: CreateSessionRequest


class SystemSessionCreateOrUpdateDef(BaseSystemDef):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    resource: Literal["session"] = "session"
    resource_id: UUID
    operation: Literal["create_or_update"] = "create_or_update"
    arguments: CreateOrUpdateSessionRequest


class SystemSessionDeleteDef(BaseSystemDef):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    resource: Literal["session"] = "session"
    resource_id: UUID
    operation: Literal["delete"] = "delete"


class SystemSessionGetDef(BaseSystemDef):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    resource: Literal["session"] = "session"
    resource_id: UUID
    operation: Literal["get"] = "get"


class SystemSessionHistoryDef(BaseSystemDef):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    resource: Literal["session"] = "session"
    resource_id: UUID
    operation: Literal["history"] = "history"


class SystemSessionListDef(BaseSystemDef):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    resource: Literal["session"] = "session"
    resource_id: UUID
    operation: Literal["list"] = "list"
    arguments: PaginationOptions


class SystemSessionPatchDef(BaseSystemDef):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    resource: Literal["session"] = "session"
    resource_id: UUID
    operation: Literal["patch"] = "patch"
    arguments: PatchSessionRequest


class SystemSessionUpdateDef(BaseSystemDef):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    resource: Literal["session"] = "session"
    resource_id: UUID
    operation: Literal["update"] = "update"
    arguments: UpdateSessionRequest


class SystemTaskGetDef(BaseSystemDef):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    resource: Literal["task"] = "task"
    resource_id: UUID
    operation: Literal["get"] = "get"


class SystemTaskListDef(BaseSystemDef):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    resource: Literal["agent"] = "agent"
    resource_id: UUID
    subresource: Literal["task"] = "task"
    operation: Literal["list"] = "list"
    arguments: PaginationOptions


class SystemToolCreateDef(BaseSystemDef):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    resource: Literal["agent"] = "agent"
    resource_id: UUID
    subresource: Literal["tool"] = "tool"
    operation: Literal["create"] = "create"
    arguments: SystemCreateToolRequest


class SystemToolDeleteDef(BaseSystemDef):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    resource: Literal["agent"] = "agent"
    resource_id: UUID
    subresource: Literal["tool"] = "tool"
    operation: Literal["delete"] = "delete"


class SystemToolListDef(BaseSystemDef):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    resource: Literal["agent"] = "agent"
    resource_id: UUID
    subresource: Literal["tool"] = "tool"
    operation: Literal["list"] = "list"
    arguments: PaginationOptions


class SystemToolPatchDef(BaseSystemDef):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    resource: Literal["agent"] = "agent"
    resource_id: UUID
    subresource: Literal["tool"] = "tool"
    operation: Literal["patch"] = "patch"
    arguments: SystemPatchToolRequest


class SystemToolUpdateDef(BaseSystemDef):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    resource: Literal["agent"] = "agent"
    resource_id: UUID
    subresource: Literal["tool"] = "tool"
    operation: Literal["update"] = "update"
    arguments: SystemUpdateToolRequest


class SystemTransitionListDef(BaseSystemDef):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    resource: Literal["execution"] = "execution"
    resource_id: UUID
    subresource: Literal["transition"] = "transition"
    operation: Literal["list"] = "list"
    arguments: PaginationOptions


class SystemUpdateToolRequest(SystemCreateToolRequest):
    pass


class SystemUserCreateDef(BaseSystemDef):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    resource: Literal["user"] = "user"
    resource_id: UUID
    operation: Literal["create"] = "create"
    arguments: CreateUserRequest


class SystemUserCreateOrUpdateDef(BaseSystemDef):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    resource: Literal["user"] = "user"
    resource_id: UUID
    operation: Literal["create_or_update"] = "create_or_update"
    arguments: CreateOrUpdateUserRequest


class SystemUserDeleteDef(BaseSystemDef):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    resource: Literal["user"] = "user"
    resource_id: UUID
    operation: Literal["delete"] = "delete"


class SystemUserGetDef(BaseSystemDef):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    resource: Literal["user"] = "user"
    resource_id: UUID
    operation: Literal["get"] = "get"


class SystemUserListDef(BaseSystemDef):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    resource: Literal["user"] = "user"
    resource_id: UUID
    operation: Literal["list"] = "list"
    arguments: PaginationOptions


class SystemUserPatchDef(BaseSystemDef):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    resource: Literal["user"] = "user"
    resource_id: UUID
    operation: Literal["patch"] = "patch"
    arguments: PatchUserRequest


class SystemUserUpdateDef(BaseSystemDef):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    resource: Literal["user"] = "user"
    resource_id: UUID
    operation: Literal["update"] = "update"
    arguments: UpdateUserRequest


class Tool(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: Annotated[str, Field(max_length=40, pattern="^[^\\W0-9]\\w*$")]
    """
    Name of the tool (must be unique for this agent and a valid python identifier string )
    """
    description: str | None = None
    """
    Description of the tool
    """
    function: FunctionDef | None = None
    """
    The function to call
    """
    integration: IntegrationDef | None = None
    """
    The integration to call
    """
    system: (
        SystemAgentListDef
        | SystemAgentDeleteDef
        | SystemAgentGetDef
        | SystemToolCreateDef
        | SystemToolUpdateDef
        | SystemToolListDef
        | SystemToolDeleteDef
        | SystemToolPatchDef
        | SystemDocCreateDef
        | SystemDocListDef
        | SystemDocDeleteDef
        | SystemDocGetDef
        | SystemDocEmbedDef
        | SystemDocSearchDef
        | SystemSessionCreateDef
        | SystemSessionUpdateDef
        | SystemSessionListDef
        | SystemSessionDeleteDef
        | SystemSessionCreateOrUpdateDef
        | SystemSessionGetDef
        | SystemSessionHistoryDef
        | SystemSessionPatchDef
        | SystemUserCreateDef
        | SystemUserUpdateDef
        | SystemUserListDef
        | SystemUserDeleteDef
        | SystemUserCreateOrUpdateDef
        | SystemUserGetDef
        | SystemUserPatchDef
        | SystemJobGetDef
        | SystemTaskListDef
        | SystemTaskGetDef
        | SystemExecutionCreateDef
        | SystemExecutionListDef
        | SystemExecutionChangeStatusDef
        | SystemExecutionGetDef
        | SystemTransitionListDef
        | None
    ) = None
    """
    The system to call
    """
    api_call: ApiCallDef | None = None
    """
    The API call to make
    """
    created_at: Annotated[AwareDatetime, Field(json_schema_extra={"readOnly": True})]
    """
    When this resource was created as UTC date-time
    """
    updated_at: Annotated[AwareDatetime, Field(json_schema_extra={"readOnly": True})]
    """
    When this resource was updated as UTC date-time
    """
    id: Annotated[UUID, Field(json_schema_extra={"readOnly": True})]


class ToolResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: UUID
    output: dict[str, Any]
    """
    The output of the tool
    """


class UpdateToolRequest(BaseModel):
    """
    Payload for updating a tool
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: Annotated[str, Field(max_length=40, pattern="^[^\\W0-9]\\w*$")]
    """
    Name of the tool (must be unique for this agent and a valid python identifier string )
    """
    description: str | None = None
    """
    Description of the tool
    """
    function: FunctionDef | None = None
    """
    The function to call
    """
    integration: IntegrationDef | None = None
    """
    The integration to call
    """


class ChosenFunctionCall(ChosenToolCall):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal["function"] = "function"
    function: FunctionCallOption
    """
    The function to call
    """
