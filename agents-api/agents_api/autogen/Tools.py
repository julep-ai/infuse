# generated by datamodel-codegen:
#   filename:  openapi-0.4.0.yaml
#   timestamp: 2024-07-15T21:10:09+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any, Dict, Literal
from uuid import UUID

from pydantic import AwareDatetime, BaseModel, Field


class FunctionCallOption(BaseModel):
    name: str
    """
    The name of the function
    """


class FunctionDef(BaseModel):
    """
    Function definition
    """

    name: Annotated[str | None, Field("overriden", pattern="^[^\\W0-9]\\w*$")]
    """
    DO NOT USE: This will be overriden by the tool name. Here only for compatibility reasons.
    """
    parameters: Dict[str, Any]
    """
    The parameters the function accepts
    """
    description: Annotated[
        str | None,
        Field(
            None,
            pattern="^[\\p{L}\\p{Nl}\\p{Pattern_Syntax}\\p{Pattern_White_Space}]+[\\p{ID_Start}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\p{Pattern_Syntax}\\p{Pattern_White_Space}]*$",
        ),
    ]
    """
    Description of the function
    """


class FunctionDefUpdate(BaseModel):
    """
    Function definition
    """

    name: Annotated[str | None, Field("overriden", pattern="^[^\\W0-9]\\w*$")]
    """
    DO NOT USE: This will be overriden by the tool name. Here only for compatibility reasons.
    """
    parameters: Dict[str, Any] | None = None
    """
    The parameters the function accepts
    """
    description: Annotated[
        str | None,
        Field(
            None,
            pattern="^[\\p{L}\\p{Nl}\\p{Pattern_Syntax}\\p{Pattern_White_Space}]+[\\p{ID_Start}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\p{Pattern_Syntax}\\p{Pattern_White_Space}]*$",
        ),
    ]
    """
    Description of the function
    """


class ToolResponse(BaseModel):
    id: UUID
    output: Dict[str, Any]
    """
    The output of the tool
    """


class ToolType(str, Enum):
    function = "function"
    integration = "integration"
    system = "system"
    api_call = "api_call"


class UpdateToolRequest(BaseModel):
    """
    Payload for updating a tool
    """

    type: ToolType
    """
    Whether this tool is a `function`, `api_call`, `system` etc. (Only `function` tool supported right now)
    """
    background: bool
    """
    The tool should be run in the background (not supported at the moment)
    """
    interactive: bool
    """
    Whether the tool that can be run interactively (response should contain "stop" boolean field)
    """
    function: FunctionDef | None = None
    integration: Any | None = None
    system: Any | None = None
    api_call: Any | None = None


class ChosenToolCall(BaseModel):
    """
    The response tool value generated by the model
    """

    type: ToolType
    """
    Whether this tool is a `function`, `api_call`, `system` etc. (Only `function` tool supported right now)
    """
    function: FunctionCallOption | None = None
    integration: Any | None = None
    system: Any | None = None
    api_call: Any | None = None
    id: Annotated[UUID, Field(json_schema_extra={"readOnly": True})]


class CreateToolRequest(BaseModel):
    """
    Payload for creating a tool
    """

    type: ToolType
    """
    Whether this tool is a `function`, `api_call`, `system` etc. (Only `function` tool supported right now)
    """
    background: bool
    """
    The tool should be run in the background (not supported at the moment)
    """
    interactive: bool
    """
    Whether the tool that can be run interactively (response should contain "stop" boolean field)
    """
    function: FunctionDef | None = None
    integration: Any | None = None
    system: Any | None = None
    api_call: Any | None = None


class PatchToolRequest(BaseModel):
    """
    Payload for patching a tool
    """

    type: ToolType | None = None
    """
    Whether this tool is a `function`, `api_call`, `system` etc. (Only `function` tool supported right now)
    """
    background: bool | None = False
    """
    The tool should be run in the background (not supported at the moment)
    """
    interactive: bool | None = False
    """
    Whether the tool that can be run interactively (response should contain "stop" boolean field)
    """
    function: FunctionDefUpdate | None = None
    integration: Any | None = None
    system: Any | None = None
    api_call: Any | None = None


class Tool(BaseModel):
    type: ToolType
    """
    Whether this tool is a `function`, `api_call`, `system` etc. (Only `function` tool supported right now)
    """
    background: bool
    """
    The tool should be run in the background (not supported at the moment)
    """
    interactive: bool
    """
    Whether the tool that can be run interactively (response should contain "stop" boolean field)
    """
    function: FunctionDef | None = None
    integration: Any | None = None
    system: Any | None = None
    api_call: Any | None = None
    created_at: Annotated[AwareDatetime, Field(json_schema_extra={"readOnly": True})]
    """
    When this resource was created as UTC date-time
    """
    updated_at: Annotated[AwareDatetime, Field(json_schema_extra={"readOnly": True})]
    """
    When this resource was updated as UTC date-time
    """
    id: Annotated[UUID, Field(json_schema_extra={"readOnly": True})]


class ChosenFunctionCall(ChosenToolCall):
    type: Literal["function"] = "function"
    function: FunctionCallOption
    """
    The function to call
    """


class FunctionTool(Tool):
    type: Literal["function"] = "function"
    background: Literal[False] = False
    interactive: Literal[False] = False
    function: FunctionDef
    """
    The function to call
    """
