# generated by datamodel-codegen:
#   filename:  openapi-0.4.0.yaml

from __future__ import annotations

from typing import Annotated, Any, Literal
from uuid import UUID

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field


class ChosenToolCall(BaseModel):
    """
    The response tool value generated by the model
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal["function", "integration", "system", "api_call"]
    """
    Whether this tool is a `function`, `api_call`, `system` etc. (Only `function` tool supported right now)
    """
    function: FunctionCallOption | None = None
    integration: Any | None = None
    system: Any | None = None
    api_call: Any | None = None
    id: Annotated[UUID, Field(json_schema_extra={"readOnly": True})]


class CreateToolRequest(BaseModel):
    """
    Payload for creating a tool
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal["function", "integration", "system", "api_call"] = "function"
    """
    Whether this tool is a `function`, `api_call`, `system` etc. (Only `function` tool supported right now)The type of the tool
    """
    name: Annotated[str, Field(max_length=40, pattern="^[^\\W0-9]\\w*$")]
    """
    Name of the tool (must be unique for this agent and a valid python identifier string )
    """
    function: FunctionDef
    """
    The function to call
    """
    integration: Any | None = None
    system: Any | None = None
    api_call: Any | None = None


class FunctionCallOption(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: str
    """
    The name of the function
    """


class FunctionDef(BaseModel):
    """
    Function definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: Any | None = None
    """
    DO NOT USE: This will be overriden by the tool name. Here only for compatibility reasons.
    """
    description: Annotated[
        str | None,
        Field(
            None,
            max_length=120,
            pattern="^[\\p{L}\\p{Nl}\\p{Pattern_Syntax}\\p{Pattern_White_Space}]+[\\p{ID_Start}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\p{Pattern_Syntax}\\p{Pattern_White_Space}]*$",
        ),
    ]
    """
    Description of the function
    """
    parameters: dict[str, Any] | None = None
    """
    The parameters the function accepts
    """


class NamedApiCallChoice(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    api_call: Any | None = None


class NamedFunctionChoice(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    function: FunctionCallOption
    """
    The function to call
    """


class NamedIntegrationChoice(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    integration: Any | None = None


class NamedSystemChoice(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    system: Any | None = None


class PatchToolRequest(BaseModel):
    """
    Payload for patching a tool
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal["function", "integration", "system", "api_call"] = "function"
    """
    Whether this tool is a `function`, `api_call`, `system` etc. (Only `function` tool supported right now)The type of the tool
    """
    name: Annotated[str | None, Field(None, max_length=40, pattern="^[^\\W0-9]\\w*$")]
    """
    Name of the tool (must be unique for this agent and a valid python identifier string )
    """
    function: FunctionDef | None = None
    """
    The function to call
    """
    integration: Any | None = None
    system: Any | None = None
    api_call: Any | None = None


class Tool(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal["function", "integration", "system", "api_call"] = "function"
    """
    Whether this tool is a `function`, `api_call`, `system` etc. (Only `function` tool supported right now)The type of the tool
    """
    name: Annotated[str, Field(max_length=40, pattern="^[^\\W0-9]\\w*$")]
    """
    Name of the tool (must be unique for this agent and a valid python identifier string )
    """
    function: FunctionDef
    """
    The function to call
    """
    integration: Any | None = None
    system: Any | None = None
    api_call: Any | None = None
    created_at: Annotated[AwareDatetime, Field(json_schema_extra={"readOnly": True})]
    """
    When this resource was created as UTC date-time
    """
    updated_at: Annotated[AwareDatetime, Field(json_schema_extra={"readOnly": True})]
    """
    When this resource was updated as UTC date-time
    """
    id: Annotated[UUID, Field(json_schema_extra={"readOnly": True})]


class ToolResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: UUID
    output: dict[str, Any]
    """
    The output of the tool
    """


class UpdateToolRequest(BaseModel):
    """
    Payload for updating a tool
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal["function", "integration", "system", "api_call"] = "function"
    """
    Whether this tool is a `function`, `api_call`, `system` etc. (Only `function` tool supported right now)The type of the tool
    """
    name: Annotated[str, Field(max_length=40, pattern="^[^\\W0-9]\\w*$")]
    """
    Name of the tool (must be unique for this agent and a valid python identifier string )
    """
    function: FunctionDef
    """
    The function to call
    """
    integration: Any | None = None
    system: Any | None = None
    api_call: Any | None = None


class ChosenFunctionCall(ChosenToolCall):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Literal["function"] = "function"
    function: FunctionCallOption
    """
    The function to call
    """
