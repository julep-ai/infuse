# generated by datamodel-codegen:
#   filename:  openapi-0.4.0.yaml

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field

from .Common import IdentifierSafeUnicode, Uuid, ValidPythonIdentifier


class ChosenToolCall(BaseModel):
    """
    The response tool value generated by the model
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: ToolType
    """
    Whether this tool is a `function`, `api_call`, `system` etc. (Only `function` tool supported right now)
    """
    function: FunctionCallOption | None = None
    integration: Any | None = None
    system: Any | None = None
    api_call: Any | None = None
    id: Annotated[Uuid, Field(json_schema_extra={"readOnly": True})]


class CreateToolRequest(BaseModel):
    """
    Payload for creating a tool
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: ToolType
    """
    Whether this tool is a `function`, `api_call`, `system` etc. (Only `function` tool supported right now)
    """
    background: bool = False
    """
    The tool should be run in the background (not supported at the moment)
    """
    function: FunctionDef | None = None
    integration: Any | None = None
    system: Any | None = None
    api_call: Any | None = None


class FunctionCallOption(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: str
    """
    The name of the function
    """


class FunctionDef(BaseModel):
    """
    Function definition
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: Annotated[ValidPythonIdentifier, Field("overriden")]
    """
    DO NOT USE: This will be overriden by the tool name. Here only for compatibility reasons.
    """
    parameters: dict[str, Any]
    """
    The parameters the function accepts
    """
    description: IdentifierSafeUnicode | None = None
    """
    Description of the function
    """


class Tool(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: ToolType
    """
    Whether this tool is a `function`, `api_call`, `system` etc. (Only `function` tool supported right now)
    """
    background: bool = False
    """
    The tool should be run in the background (not supported at the moment)
    """
    function: FunctionDef | None = None
    integration: Any | None = None
    system: Any | None = None
    api_call: Any | None = None
    created_at: Annotated[AwareDatetime, Field(json_schema_extra={"readOnly": True})]
    """
    When this resource was created as UTC date-time
    """
    updated_at: Annotated[AwareDatetime, Field(json_schema_extra={"readOnly": True})]
    """
    When this resource was updated as UTC date-time
    """
    id: Annotated[Uuid, Field(json_schema_extra={"readOnly": True})]


class ToolResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Uuid
    output: dict[str, Any]
    """
    The output of the tool
    """


class ToolType(str, Enum):
    function = "function"
    integration = "integration"
    system = "system"
    api_call = "api_call"
