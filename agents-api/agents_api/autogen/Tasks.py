# generated by datamodel-codegen:
#   filename:  openapi-0.4.0.yaml

from __future__ import annotations

from typing import Annotated, Any

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field

from .Common import Uuid
from .Tools import CreateToolRequest


class Task(BaseModel):
    """
    Object describing a Task
    """

    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: str
    description: str = ""
    main: list[WorkflowStep]
    """
    The entrypoint of the task.
    """
    input_schema: dict[str, Any] | None = None
    """
    The schema for the input to the task. `null` means all inputs are valid.
    """
    tools: list[CreateToolRequest] = []
    """
    Tools defined specifically for this task not included in the Agent itself.
    """
    inherit_tools: bool = True
    """
    Whether to inherit tools from the parent agent or not. Defaults to true.
    """
    agent_id: Annotated[Uuid, Field(json_schema_extra={"readOnly": True})]
    id: Annotated[Uuid, Field(json_schema_extra={"readOnly": True})]
    created_at: Annotated[AwareDatetime, Field(json_schema_extra={"readOnly": True})]
    """
    When this resource was created as UTC date-time
    """
    updated_at: Annotated[AwareDatetime, Field(json_schema_extra={"readOnly": True})]
    """
    When this resource was updated as UTC date-time
    """
    metadata: dict[str, Any] | None = None


class WorkflowStep(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    kind: str | None = None
    """
    Discriminator property for WorkflowStep.
    """
