# generated by datamodel-codegen:
#   filename:  openapi-0.4.0.yaml
#   timestamp: 2024-07-15T21:17:24+00:00

from __future__ import annotations

from typing import Annotated, Any, Dict, List
from uuid import UUID

from pydantic import AwareDatetime, BaseModel, Field

from . import Chat


class Agent(BaseModel):
    id: Annotated[UUID, Field(json_schema_extra={"readOnly": True})]
    metadata: Dict[str, Any] | None = None
    created_at: Annotated[AwareDatetime, Field(json_schema_extra={"readOnly": True})]
    """
    When this resource was created as UTC date-time
    """
    updated_at: Annotated[AwareDatetime, Field(json_schema_extra={"readOnly": True})]
    """
    When this resource was updated as UTC date-time
    """
    name: Annotated[
        str,
        Field(
            pattern="^[\\p{L}\\p{Nl}\\p{Pattern_Syntax}\\p{Pattern_White_Space}]+[\\p{ID_Start}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\p{Pattern_Syntax}\\p{Pattern_White_Space}]*$"
        ),
    ]
    """
    Name of the agent
    """
    about: str
    """
    About the agent
    """
    model: str
    """
    Model name to use (gpt-4-turbo, gemini-nano etc)
    """
    instructions: str | List[str]
    """
    Instructions for the agent
    """
    default_settings: (
        Chat.GenerationPresetSettings | Chat.OpenAISettings | Chat.VLLMSettings | None
    ) = None
    """
    Default settings for all sessions created by this agent
    """


class CreateAgentRequest(BaseModel):
    """
    Payload for creating a agent (and associated documents)
    """

    metadata: Dict[str, Any] | None = None
    name: Annotated[
        str,
        Field(
            pattern="^[\\p{L}\\p{Nl}\\p{Pattern_Syntax}\\p{Pattern_White_Space}]+[\\p{ID_Start}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\p{Pattern_Syntax}\\p{Pattern_White_Space}]*$"
        ),
    ]
    """
    Name of the agent
    """
    about: str
    """
    About the agent
    """
    model: str
    """
    Model name to use (gpt-4-turbo, gemini-nano etc)
    """
    instructions: str | List[str]
    """
    Instructions for the agent
    """
    default_settings: (
        Chat.GenerationPresetSettings | Chat.OpenAISettings | Chat.VLLMSettings | None
    ) = None
    """
    Default settings for all sessions created by this agent
    """
    docs: Annotated[List, Field(max_length=100)]
    """
    Documents to index for this agent. (Max: 100 items)
    """


class CreateOrUpdateAgentRequest(BaseModel):
    id: UUID
    metadata: Dict[str, Any] | None = None
    name: Annotated[
        str,
        Field(
            pattern="^[\\p{L}\\p{Nl}\\p{Pattern_Syntax}\\p{Pattern_White_Space}]+[\\p{ID_Start}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\p{Pattern_Syntax}\\p{Pattern_White_Space}]*$"
        ),
    ]
    """
    Name of the agent
    """
    about: str
    """
    About the agent
    """
    model: str
    """
    Model name to use (gpt-4-turbo, gemini-nano etc)
    """
    instructions: str | List[str]
    """
    Instructions for the agent
    """
    default_settings: (
        Chat.GenerationPresetSettings | Chat.OpenAISettings | Chat.VLLMSettings | None
    ) = None
    """
    Default settings for all sessions created by this agent
    """


class PatchAgentRequest(BaseModel):
    """
    Payload for patching a agent
    """

    metadata: Dict[str, Any] | None = None
    name: Annotated[
        str | None,
        Field(
            "",
            pattern="^[\\p{L}\\p{Nl}\\p{Pattern_Syntax}\\p{Pattern_White_Space}]+[\\p{ID_Start}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\p{Pattern_Syntax}\\p{Pattern_White_Space}]*$",
        ),
    ]
    """
    Name of the agent
    """
    about: str | None = ""
    """
    About the agent
    """
    model: str | None = ""
    """
    Model name to use (gpt-4-turbo, gemini-nano etc)
    """
    instructions: str | List[str] | None = ""
    """
    Instructions for the agent
    """
    default_settings: (
        Chat.GenerationPresetSettings | Chat.OpenAISettings | Chat.VLLMSettings | None
    ) = None
    """
    Default settings for all sessions created by this agent
    """


class UpdateAgentRequest(BaseModel):
    """
    Payload for updating a agent
    """

    metadata: Dict[str, Any] | None = None
    name: Annotated[
        str,
        Field(
            pattern="^[\\p{L}\\p{Nl}\\p{Pattern_Syntax}\\p{Pattern_White_Space}]+[\\p{ID_Start}\\p{Mn}\\p{Mc}\\p{Nd}\\p{Pc}\\p{Pattern_Syntax}\\p{Pattern_White_Space}]*$"
        ),
    ]
    """
    Name of the agent
    """
    about: str
    """
    About the agent
    """
    model: str
    """
    Model name to use (gpt-4-turbo, gemini-nano etc)
    """
    instructions: str | List[str]
    """
    Instructions for the agent
    """
    default_settings: (
        Chat.GenerationPresetSettings | Chat.OpenAISettings | Chat.VLLMSettings | None
    ) = None
    """
    Default settings for all sessions created by this agent
    """
