# generated by datamodel-codegen:
#   filename:  openapi-0.4.0.yaml
#   timestamp: 2024-07-15T21:10:09+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, List, Literal
from uuid import UUID

from pydantic import AnyUrl, AwareDatetime, BaseModel, Field

from . import Tools


class ChatMLRole(str, Enum):
    """
    ChatML role (system|assistant|user|function_call|function|function_response|auto)
    """

    user = "user"
    agent = "agent"
    system = "system"
    function = "function"
    function_response = "function_response"
    function_call = "function_call"
    auto = "auto"


class Source(str, Enum):
    api_request = "api_request"
    api_response = "api_response"
    tool_response = "tool_response"
    internal = "internal"
    summarizer = "summarizer"
    meta = "meta"


class ImageDetail(str, Enum):
    """
    Image detail level
    """

    low = "low"
    high = "high"
    auto = "auto"


class ImageURL(BaseModel):
    url: AnyUrl
    """
    Image URL or base64 data url (e.g. `data:image/jpeg;base64,<the base64 encoded image>`)
    """
    detail: ImageDetail
    """
    The detail level of the image
    """


class Relation(BaseModel):
    head: UUID
    relation: str
    tail: UUID


class BaseChatMLContentPart(BaseModel):
    type: str
    """
    The type of content part
    """
    text: str | None = None
    image_url: ImageURL | None = None


class ChatMLImageContentPart(BaseChatMLContentPart):
    image_url: ImageURL
    """
    The image URL
    """
    type: Literal["image_url"] = "image_url"
    """
    The type (fixed to 'image_url')
    """


class ChatMLTextContentPart(BaseChatMLContentPart):
    text: str
    type: Literal["text"] = "text"
    """
    The type (fixed to 'text')
    """


class InputChatMLMessage(BaseModel):
    role: ChatMLRole
    """
    The role of the message
    """
    content: str | List[str] | List[ChatMLTextContentPart | ChatMLImageContentPart]
    """
    The content parts of the message
    """
    name: str | None = None
    """
    Name
    """
    continue_: Annotated[bool | None, Field(None, alias="continue")]
    """
    Whether to continue this message or return a new one
    """


class Entry(BaseModel):
    role: ChatMLRole
    name: str
    content: (
        List[ChatMLTextContentPart | ChatMLImageContentPart]
        | Tools.Tool
        | Tools.ChosenToolCall
        | str
        | Tools.ToolResponse
        | List[
            List[ChatMLTextContentPart | ChatMLImageContentPart]
            | Tools.Tool
            | Tools.ChosenToolCall
            | str
            | Tools.ToolResponse
        ]
    )
    source: Source
    timestamp: int
    """
    This is the time that this event refers to.
    """
    created_at: Annotated[AwareDatetime, Field(json_schema_extra={"readOnly": True})]
    """
    When this resource was created as UTC date-time
    """
    id: Annotated[UUID, Field(json_schema_extra={"readOnly": True})]


class History(BaseModel):
    entries: List[Entry]
    relations: List[Relation]
    session_id: Annotated[UUID, Field(json_schema_extra={"readOnly": True})]
    created_at: Annotated[AwareDatetime, Field(json_schema_extra={"readOnly": True})]
    """
    When this resource was created as UTC date-time
    """
