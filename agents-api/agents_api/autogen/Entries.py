# generated by datamodel-codegen:
#   filename:  openapi-0.4.0.yaml

from __future__ import annotations

from enum import Enum
from typing import Annotated, Literal

from pydantic import AnyUrl, AwareDatetime, BaseModel, ConfigDict, Field

from .Common import Uuid
from .Tools import ChosenToolCall, Tool, ToolResponse


class BaseChatMLContentPart(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: str
    """
    The type of content part
    """
    text: str | None = None
    image_url: ImageURL | None = None


class ChatMLImageContentPart(BaseChatMLContentPart):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    image_url: ImageURL
    """
    The image URL
    """
    type: Literal["image_url"] = "image_url"
    """
    The type (fixed to 'image_url')
    """


class ChatMLRole(str, Enum):
    """
    ChatML role (system|assistant|user|function_call|function|function_response|auto)
    """

    user = "user"
    agent = "agent"
    system = "system"
    function = "function"
    function_response = "function_response"
    function_call = "function_call"
    auto = "auto"


class ChatMLTextContentPart(BaseChatMLContentPart):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    text: str
    type: Literal["text"] = "text"
    """
    The type (fixed to 'text')
    """


class Entry(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    role: ChatMLRole
    name: str | None = None
    content: (
        list[ChatMLTextContentPart | ChatMLImageContentPart]
        | Tool
        | ChosenToolCall
        | str
        | ToolResponse
        | list[
            list[ChatMLTextContentPart | ChatMLImageContentPart]
            | Tool
            | ChosenToolCall
            | str
            | ToolResponse
        ]
    )
    source: Source
    timestamp: int
    """
    This is the time that this event refers to.
    """
    created_at: Annotated[AwareDatetime, Field(json_schema_extra={"readOnly": True})]
    """
    When this resource was created as UTC date-time
    """
    id: Annotated[Uuid, Field(json_schema_extra={"readOnly": True})]


class History(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    entries: list[Entry]
    relations: list[Relation]
    session_id: Annotated[Uuid, Field(json_schema_extra={"readOnly": True})]
    created_at: Annotated[AwareDatetime, Field(json_schema_extra={"readOnly": True})]
    """
    When this resource was created as UTC date-time
    """


class ImageDetail(str, Enum):
    """
    Image detail level
    """

    low = "low"
    high = "high"
    auto = "auto"


class ImageURL(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    url: AnyUrl
    """
    Image URL or base64 data url (e.g. `data:image/jpeg;base64,<the base64 encoded image>`)
    """
    detail: ImageDetail = "auto"
    """
    The detail level of the image
    """


class Relation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    head: Uuid
    relation: str
    tail: Uuid


class Source(str, Enum):
    api_request = "api_request"
    api_response = "api_response"
    tool_response = "tool_response"
    internal = "internal"
    summarizer = "summarizer"
    meta = "meta"
