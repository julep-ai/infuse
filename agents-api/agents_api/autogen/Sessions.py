# generated by datamodel-codegen:
#   filename:  openapi-0.4.0.yaml
#   timestamp: 2024-07-15T21:10:09+00:00

from __future__ import annotations

from typing import Annotated, Any, Dict, List
from uuid import UUID

from pydantic import AwareDatetime, BaseModel, Field


class CreateOrUpdateSessionRequest(BaseModel):
    id: UUID
    user: UUID | None = None
    """
    User ID of user associated with this session
    """
    users: List[UUID] | None = None
    agent: UUID | None = None
    """
    Agent ID of agent associated with this session
    """
    agents: List[UUID] | None = None
    situation: str
    """
    A specific situation that sets the background for this session
    """
    render_templates: bool
    """
    Render system and assistant message content as jinja templates
    """
    token_budget: int
    """
    Threshold value for the adaptive context functionality
    """
    context_overflow: str
    """
    Action to start on context window overflow
    """
    metadata: Dict[str, Any] | None = None


class CreateSessionRequest(BaseModel):
    """
    Payload for creating a session
    """

    user: UUID | None = None
    """
    User ID of user associated with this session
    """
    users: List[UUID] | None = None
    agent: UUID | None = None
    """
    Agent ID of agent associated with this session
    """
    agents: List[UUID] | None = None
    situation: str
    """
    A specific situation that sets the background for this session
    """
    render_templates: bool
    """
    Render system and assistant message content as jinja templates
    """
    token_budget: int
    """
    Threshold value for the adaptive context functionality
    """
    context_overflow: str
    """
    Action to start on context window overflow
    """
    metadata: Dict[str, Any] | None = None


class PatchSessionRequest(BaseModel):
    """
    Payload for patching a session
    """

    situation: str | None = (
        '{%- if agent.name -%}\nYou are {{agent.name}}.{{" "}}\n{%- endif -%}\n\n{%- if agent.about -%}\nAbout you: {{agent.name}}.{{" "}}\n{%- endif -%}\n\n{%- if user -%}\nYou are talking to a user\n  {%- if user.name -%}{{" "}} and their name is {{user.name}}\n    {%- if user.about -%}. About the user: {{user.about}}.{%- else -%}.{%- endif -%}\n  {%- endif -%}\n{%- endif -%}\n\n{{"\n\n"}}\n\n{%- if agent.instructions -%}\nInstructions:{{"\n"}}\n  {%- if agent.instructions is string -%}\n    {{agent.instructions}}{{"\n"}}\n  {%- else -%}\n    {%- for instruction in agent.instructions -%}\n      - {{instruction}}{{"\n"}}\n    {%- endfor -%}\n  {%- endif -%}\n  {{"\n"}}\n{%- endif -%}\n\n{%- if tools -%}\nTools:{{"\n"}}\n  {%- for tool in tools -%}\n    {%- if tool.type == "function" -%}\n      - {{tool.function.name}}\n      {%- if tool.function.description -%}: {{tool.function.description}}{%- endif -%}{{"\n"}}\n    {%- else -%}\n      - {{ 0/0 }} {# Error: Other tool types aren\'t supported yet. #}\n    {%- endif -%}\n  {%- endfor -%}\n{{"\n\n"}}\n{%- endif -%}\n\n{%- if docs -%}\nRelevant documents:{{"\n"}}\n  {%- for doc in docs -%}\n    {{doc.title}}{{"\n"}}\n    {%- if doc.content is string -%}\n      {{doc.content}}{{"\n"}}\n    {%- else -%}\n      {%- for snippet in doc.content -%}\n        {{snippet}}{{"\n"}}\n      {%- endfor -%}\n    {%- endif -%}\n    {{"---"}}\n  {%- endfor -%}\n{%- endif -%}'
    )
    """
    A specific situation that sets the background for this session
    """
    render_templates: bool | None = False
    """
    Render system and assistant message content as jinja templates
    """
    token_budget: int | None = None
    """
    Threshold value for the adaptive context functionality
    """
    context_overflow: str | None = None
    """
    Action to start on context window overflow
    """
    metadata: Dict[str, Any] | None = None


class Session(BaseModel):
    situation: str
    """
    A specific situation that sets the background for this session
    """
    summary: Annotated[str, Field(json_schema_extra={"readOnly": True})]
    """
    Summary (null at the beginning) - generated automatically after every interaction
    """
    render_templates: bool
    """
    Render system and assistant message content as jinja templates
    """
    token_budget: int
    """
    Threshold value for the adaptive context functionality
    """
    context_overflow: str
    """
    Action to start on context window overflow
    """
    id: Annotated[UUID, Field(json_schema_extra={"readOnly": True})]
    metadata: Dict[str, Any] | None = None
    created_at: Annotated[AwareDatetime, Field(json_schema_extra={"readOnly": True})]
    """
    When this resource was created as UTC date-time
    """
    updated_at: Annotated[AwareDatetime, Field(json_schema_extra={"readOnly": True})]
    """
    When this resource was updated as UTC date-time
    """
    kind: str | None = None
    """
    Discriminator property for Session.
    """


class SingleAgentMultiUserSession(Session):
    agent: UUID
    users: List[UUID]


class SingleAgentNoUserSession(Session):
    agent: UUID


class SingleAgentSingleUserSession(Session):
    agent: UUID
    user: UUID


class UpdateSessionRequest(BaseModel):
    """
    Payload for updating a session
    """

    situation: str
    """
    A specific situation that sets the background for this session
    """
    render_templates: bool
    """
    Render system and assistant message content as jinja templates
    """
    token_budget: int
    """
    Threshold value for the adaptive context functionality
    """
    context_overflow: str
    """
    Action to start on context window overflow
    """
    metadata: Dict[str, Any] | None = None


class MultiAgentMultiUserSession(Session):
    agents: List[UUID]
    users: List[UUID]


class MultiAgentNoUserSession(Session):
    agents: List[UUID]


class MultiAgentSingleUserSession(Session):
    agents: List[UUID]
    user: UUID
