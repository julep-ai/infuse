# generated by datamodel-codegen:
#   filename:  openapi-0.4.0.yaml

from __future__ import annotations

from enum import Enum

from pydantic import BaseModel, ConfigDict

from .Agents import Agent
from .Docs import Doc, DocReference, DocSearchRequest, EmbedQueryRequest
from .Entries import History
from .Executions import Execution, Transition
from .Sessions import Session
from .Tasks import Task
from .Tools import Tool
from .Users import User


class AgentDocsRouteListResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    results: list[Doc]


class AgentToolsRouteListResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    results: list[Tool]


class AgentsDocsSearchRouteSearchRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    body: DocSearchRequest


class AgentsDocsSearchRouteSearchResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    results: list[DocReference]


class AgentsRouteListResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    results: list[Agent]


class Direction(str, Enum):
    asc = "asc"
    desc = "desc"


class EmbedRouteEmbedRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    body: EmbedQueryRequest


class ExecutionTransitionsRouteListResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    results: list[Result]


class HistoryRouteListResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    results: list[History]


class Result(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    transitions: list[Transition]


class SessionsRouteListResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    results: list[Session]


class SortBy(str, Enum):
    created_at = "created_at"
    updated_at = "updated_at"
    deleted_at = "deleted_at"


class TaskExecutionsRouteListResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    results: list[Execution]


class TasksRouteListResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    results: list[Task]


class UserDocsRouteListResponse(AgentDocsRouteListResponse):
    pass


class UserDocsSearchRouteSearchRequest(AgentsDocsSearchRouteSearchRequest):
    pass


class UserDocsSearchRouteSearchResponse(AgentsDocsSearchRouteSearchResponse):
    pass


class UsersRouteListResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    results: list[User]
