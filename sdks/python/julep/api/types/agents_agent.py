# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .agents_agent_default_settings import AgentsAgentDefaultSettings
from .agents_agent_instructions import AgentsAgentInstructions
from .common_identifier_safe_unicode import CommonIdentifierSafeUnicode
from .common_uuid import CommonUuid


class AgentsAgent(pydantic_v1.BaseModel):
    id: CommonUuid
    metadata: typing.Optional[typing.Dict[str, typing.Any]] = None
    created_at: dt.datetime = pydantic_v1.Field()
    """
    When this resource was created as UTC date-time
    """

    updated_at: dt.datetime = pydantic_v1.Field()
    """
    When this resource was updated as UTC date-time
    """

    name: CommonIdentifierSafeUnicode = pydantic_v1.Field()
    """
    Name of the agent
    """

    about: str = pydantic_v1.Field()
    """
    About the agent
    """

    model: str = pydantic_v1.Field()
    """
    Model name to use (gpt-4-turbo, gemini-nano etc)
    """

    instructions: AgentsAgentInstructions = pydantic_v1.Field()
    """
    Instructions for the agent
    """

    default_settings: typing.Optional[AgentsAgentDefaultSettings] = pydantic_v1.Field(
        default=None
    )
    """
    Default settings for all sessions created by this agent
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        kwargs_with_defaults_exclude_none: typing.Any = {
            "by_alias": True,
            "exclude_none": True,
            **kwargs,
        }

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset),
            super().dict(**kwargs_with_defaults_exclude_none),
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
