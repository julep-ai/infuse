# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1


class DocsBaseDocSearchRequest(pydantic_v1.BaseModel):
    confidence: float = pydantic_v1.Field()
    """
    The confidence cutoff level
    """

    alpha: float = pydantic_v1.Field()
    """
    The weight to apply to BM25 vs Vector search results. 0 => pure BM25; 1 => pure vector;
    """

    mmr: bool = pydantic_v1.Field()
    """
    Whether to include the MMR algorithm in the search. Optimizes for diversity in search results.
    """

    lang: typing.Literal["en-US"] = pydantic_v1.Field(default="en-US")
    """
    The language to be used for text-only search. Support for other languages coming soon.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        kwargs_with_defaults_exclude_none: typing.Any = {
            "by_alias": True,
            "exclude_none": True,
            **kwargs,
        }

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset),
            super().dict(**kwargs_with_defaults_exclude_none),
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
