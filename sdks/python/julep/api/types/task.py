# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .workflow_step import WorkflowStep

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Task(pydantic.BaseModel):
    """
    Describes a Task
    """

    name: str = pydantic.Field(description="Name of the Task")
    description: typing.Optional[str] = pydantic.Field(
        description="Optional Description of the Task"
    )
    tools_available: typing.Optional[typing.List[str]] = pydantic.Field(
        description="Available Tools for the Task"
    )
    input_schema: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(
        description="JSON Schema of parameters"
    )
    main: typing.List[WorkflowStep] = pydantic.Field(
        description="Entrypoint Workflow for the Task"
    )
    id: str = pydantic.Field(description="ID of the Task")
    created_at: dt.datetime
    updated_at: typing.Optional[dt.datetime]
    agent_id: str

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
