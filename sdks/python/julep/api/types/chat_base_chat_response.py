# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .chat_competion_usage import ChatCompetionUsage
from .common_uuid import CommonUuid
from .docs_doc_reference import DocsDocReference


class ChatBaseChatResponse(pydantic_v1.BaseModel):
    usage: typing.Optional[ChatCompetionUsage] = pydantic_v1.Field(default=None)
    """
    Usage statistics for the completion request
    """

    jobs: typing.List[CommonUuid] = pydantic_v1.Field()
    """
    Background job IDs that may have been spawned from this interaction.
    """

    docs: typing.List[DocsDocReference] = pydantic_v1.Field()
    """
    Documents referenced for this request (for citation purposes).
    """

    created_at: dt.datetime = pydantic_v1.Field()
    """
    When this resource was created as UTC date-time
    """

    id: CommonUuid

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        kwargs_with_defaults_exclude_none: typing.Any = {
            "by_alias": True,
            "exclude_none": True,
            **kwargs,
        }

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset),
            super().dict(**kwargs_with_defaults_exclude_none),
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
