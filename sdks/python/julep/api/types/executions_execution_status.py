# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class ExecutionsExecutionStatus(str, enum.Enum):
    """
    The status of the execution
    """

    QUEUED = "queued"
    STARTING = "starting"
    RUNNING = "running"
    AWAITING_INPUT = "awaiting_input"
    SUCCEEDED = "succeeded"
    FAILED = "failed"
    CANCELLED = "cancelled"

    def visit(
        self,
        queued: typing.Callable[[], T_Result],
        starting: typing.Callable[[], T_Result],
        running: typing.Callable[[], T_Result],
        awaiting_input: typing.Callable[[], T_Result],
        succeeded: typing.Callable[[], T_Result],
        failed: typing.Callable[[], T_Result],
        cancelled: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is ExecutionsExecutionStatus.QUEUED:
            return queued()
        if self is ExecutionsExecutionStatus.STARTING:
            return starting()
        if self is ExecutionsExecutionStatus.RUNNING:
            return running()
        if self is ExecutionsExecutionStatus.AWAITING_INPUT:
            return awaiting_input()
        if self is ExecutionsExecutionStatus.SUCCEEDED:
            return succeeded()
        if self is ExecutionsExecutionStatus.FAILED:
            return failed()
        if self is ExecutionsExecutionStatus.CANCELLED:
            return cancelled()
