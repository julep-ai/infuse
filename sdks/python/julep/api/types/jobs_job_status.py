# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .common_identifier_safe_unicode import CommonIdentifierSafeUnicode
from .common_uuid import CommonUuid
from .jobs_job_state import JobsJobState

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class JobsJobStatus(pydantic.BaseModel):
    id: CommonUuid
    created_at: dt.datetime = pydantic.Field(
        description="When this resource was created as UTC date-time"
    )
    updated_at: dt.datetime = pydantic.Field(
        description="When this resource was updated as UTC date-time"
    )
    name: CommonIdentifierSafeUnicode = pydantic.Field(description="Name of the job")
    reason: str = pydantic.Field(description="Reason for the current state of the job")
    has_progress: bool = pydantic.Field(
        description="Whether this Job supports progress updates"
    )
    progress: float = pydantic.Field(description="Progress percentage")
    state: JobsJobState = pydantic.Field(description="Current state of the job")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
