# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

import typing_extensions

from ..core.datetime_utils import serialize_datetime
from .docs_doc_search_request_text import DocsDocSearchRequestText
from .docs_doc_search_request_vector import DocsDocSearchRequestVector
from .docs_hybrid_doc_search_request import DocsHybridDocSearchRequest
from .docs_text_only_doc_search_request import DocsTextOnlyDocSearchRequest
from .docs_vector_doc_search_request import DocsVectorDocSearchRequest

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Base(pydantic.BaseModel):
    text: typing.Optional[DocsDocSearchRequestText]
    vector: typing.Optional[DocsDocSearchRequestVector]
    confidence: float = pydantic.Field(description="The confidence cutoff level")
    alpha: float = pydantic.Field(
        description="The weight to apply to BM25 vs Vector search results. 0 => pure BM25; 1 => pure vector;"
    )
    mmr: bool = pydantic.Field(
        description="Whether to include the MMR algorithm in the search. Optimizes for diversity in search results."
    )
    lang: typing_extensions.Literal["en-US"] = pydantic.Field(
        description="The language to be used for text-only search. Support for other languages coming soon."
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}


class DocsDocSearchRequest_Vector(DocsVectorDocSearchRequest, Base):
    mode: typing_extensions.Literal["vector"]

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True


class DocsDocSearchRequest_Text(DocsTextOnlyDocSearchRequest, Base):
    mode: typing_extensions.Literal["text"]

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True


class DocsDocSearchRequest_Hybrid(DocsHybridDocSearchRequest, Base):
    mode: typing_extensions.Literal["hybrid"]

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True


DocsDocSearchRequest = typing.Union[
    DocsDocSearchRequest_Vector, DocsDocSearchRequest_Text, DocsDocSearchRequest_Hybrid
]
