# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .common_uuid import CommonUuid
from .docs_doc_owner import DocsDocOwner

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class DocsDocReference(pydantic.BaseModel):
    owner: DocsDocOwner = pydantic.Field(description="The owner of this document.")
    id: CommonUuid = pydantic.Field(description="ID of the document")
    snippet_index: typing.List[int] = pydantic.Field(
        description="Snippets referred to of the document"
    )
    title: typing.Optional[str]
    snippet: typing.Optional[str]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
