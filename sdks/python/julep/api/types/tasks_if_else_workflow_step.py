# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .tasks_cel import TasksCel

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class TasksIfElseWorkflowStep(pydantic.BaseModel):
    if_: TasksCel = pydantic.Field(alias="if", description="The condition to evaluate")
    then: "TasksWorkflowStep" = pydantic.Field(
        description="The steps to run if the condition is true"
    )
    else_: "TasksWorkflowStep" = pydantic.Field(
        alias="else", description="The steps to run if the condition is false"
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}


from .tasks_workflow_step import TasksWorkflowStep  # noqa: E402

TasksIfElseWorkflowStep.update_forward_refs(TasksWorkflowStep=TasksWorkflowStep)
