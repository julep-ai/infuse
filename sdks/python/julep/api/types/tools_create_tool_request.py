# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .tools_function_def import ToolsFunctionDef
from .tools_tool_type import ToolsToolType

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class ToolsCreateToolRequest(pydantic.BaseModel):
    """
    Payload for creating a tool
    """

    type: ToolsToolType = pydantic.Field(
        description="Whether this tool is a `function`, `api_call`, `system` etc. (Only `function` tool supported right now)"
    )
    background: bool = pydantic.Field(
        description="The tool should be run in the background (not supported at the moment)"
    )
    interactive: bool = pydantic.Field(
        description='Whether the tool that can be run interactively (response should contain "stop" boolean field)'
    )
    function: typing.Optional[ToolsFunctionDef]
    integration: typing.Optional[typing.Any]
    system: typing.Optional[typing.Any]
    api_call: typing.Optional[typing.Any]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
