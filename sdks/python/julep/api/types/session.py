# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .common_uuid import CommonUuid
from .sessions_context_overflow_type import SessionsContextOverflowType


class Session(pydantic_v1.BaseModel):
    user: typing.Optional[CommonUuid] = pydantic_v1.Field(default=None)
    """
    User ID of user associated with this session
    """

    users: typing.Optional[typing.List[CommonUuid]] = None
    agent: typing.Optional[CommonUuid] = pydantic_v1.Field(default=None)
    """
    Agent ID of agent associated with this session
    """

    agents: typing.Optional[typing.List[CommonUuid]] = None
    situation: str = pydantic_v1.Field()
    """
    A specific situation that sets the background for this session
    """

    summary: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Summary (null at the beginning) - generated automatically after every interaction
    """

    render_templates: bool = pydantic_v1.Field()
    """
    Render system and assistant message content as jinja templates
    """

    token_budget: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    Threshold value for the adaptive context functionality
    """

    context_overflow: typing.Optional[SessionsContextOverflowType] = pydantic_v1.Field(
        default=None
    )
    """
    Action to start on context window overflow
    """

    id: CommonUuid
    metadata: typing.Optional[typing.Dict[str, typing.Any]] = None
    created_at: dt.datetime = pydantic_v1.Field()
    """
    When this resource was created as UTC date-time
    """

    updated_at: dt.datetime = pydantic_v1.Field()
    """
    When this resource was updated as UTC date-time
    """

    kind: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Discriminator property for Session.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        kwargs_with_defaults_exclude_none: typing.Any = {
            "by_alias": True,
            "exclude_none": True,
            **kwargs,
        }

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset),
            super().dict(**kwargs_with_defaults_exclude_none),
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
