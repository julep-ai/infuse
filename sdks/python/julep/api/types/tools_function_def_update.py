# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .common_identifier_safe_unicode import CommonIdentifierSafeUnicode
from .common_valid_python_identifier import CommonValidPythonIdentifier

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class ToolsFunctionDefUpdate(pydantic.BaseModel):
    """
    Function definition
    """

    name: typing.Optional[CommonValidPythonIdentifier] = pydantic.Field(
        description="DO NOT USE: This will be overriden by the tool name. Here only for compatibility reasons."
    )
    parameters: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(
        description="The parameters the function accepts"
    )
    description: typing.Optional[CommonIdentifierSafeUnicode] = pydantic.Field(
        description="Description of the function"
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
