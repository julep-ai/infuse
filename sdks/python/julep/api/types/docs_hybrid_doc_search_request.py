# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .docs_hybrid_doc_search_request_text import DocsHybridDocSearchRequestText
from .docs_hybrid_doc_search_request_vector import DocsHybridDocSearchRequestVector

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class DocsHybridDocSearchRequest(pydantic.BaseModel):
    text: typing.Optional[DocsHybridDocSearchRequestText] = pydantic.Field(
        description="Text or texts to use in the search. In `hybrid` search mode, either `text` or both `text` and `vector` fields are required."
    )
    vector: typing.Optional[DocsHybridDocSearchRequestVector] = pydantic.Field(
        description="Vector or vectors to use in the search. Must be the same dimensions as the embedding model or else an error will be thrown."
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
