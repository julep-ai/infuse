/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "./environments";
import * as core from "./core";
import * as JulepApi from "./api";
export declare namespace JulepApiClient {
    interface Options {
        environment?: core.Supplier<environments.JulepApiEnvironment | string>;
        apiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
    }
}
export declare class JulepApiClient {
    protected readonly _options: JulepApiClient.Options;
    constructor(_options: JulepApiClient.Options);
    /**
     * List sessions created (use limit/offset pagination to get large number of sessions; sorted by descending order of `created_at`)
     */
    listSessions(request?: JulepApi.ListSessionsRequest, requestOptions?: JulepApiClient.RequestOptions): Promise<JulepApi.ListSessionsResponse>;
    /**
     * Create a session between an agent and a user
     */
    createSession(request: JulepApi.CreateSessionRequest, requestOptions?: JulepApiClient.RequestOptions): Promise<JulepApi.ResourceCreatedResponse>;
    /**
     * List users created (use limit/offset pagination to get large number of sessions; sorted by descending order of `created_at`)
     */
    listUsers(request?: JulepApi.ListUsersRequest, requestOptions?: JulepApiClient.RequestOptions): Promise<JulepApi.ListUsersResponse>;
    /**
     * Create a new user
     */
    createUser(request?: JulepApi.CreateUserRequest, requestOptions?: JulepApiClient.RequestOptions): Promise<JulepApi.ResourceCreatedResponse>;
    /**
     * List agents created (use limit/offset pagination to get large number of sessions; sorted by descending order of `created_at`)
     */
    listAgents(request?: JulepApi.ListAgentsRequest, requestOptions?: JulepApiClient.RequestOptions): Promise<JulepApi.ListAgentsResponse>;
    /**
     * Create a new agent
     */
    createAgent(request: JulepApi.CreateAgentRequest, requestOptions?: JulepApiClient.RequestOptions): Promise<JulepApi.ResourceCreatedResponse>;
    /**
     *
     */
    getSession(sessionId: string, requestOptions?: JulepApiClient.RequestOptions): Promise<JulepApi.Session>;
    /**
     *
     */
    updateSession(sessionId: string, request: JulepApi.UpdateSessionRequest, requestOptions?: JulepApiClient.RequestOptions): Promise<JulepApi.ResourceUpdatedResponse>;
    /**
     *
     */
    deleteSession(sessionId: string, requestOptions?: JulepApiClient.RequestOptions): Promise<void>;
    /**
     * Sorted (created_at descending)
     */
    getSuggestions(sessionId: string, request?: JulepApi.GetSuggestionsRequest, requestOptions?: JulepApiClient.RequestOptions): Promise<JulepApi.GetSuggestionsResponse>;
    /**
     * Sorted (created_at ascending)
     */
    getHistory(sessionId: string, request?: JulepApi.GetHistoryRequest, requestOptions?: JulepApiClient.RequestOptions): Promise<JulepApi.GetHistoryResponse>;
    /**
     *
     */
    chat(sessionId: string, request: JulepApi.ChatInput, requestOptions?: JulepApiClient.RequestOptions): Promise<JulepApi.ChatResponse>;
    /**
     * Sorted (created_at descending)
     */
    getAgentMemories(agentId: string, request: JulepApi.GetAgentMemoriesRequest, requestOptions?: JulepApiClient.RequestOptions): Promise<JulepApi.GetAgentMemoriesResponse>;
    /**
     *
     */
    getUser(userId: string, requestOptions?: JulepApiClient.RequestOptions): Promise<JulepApi.User>;
    /**
     *
     */
    updateUser(userId: string, request?: JulepApi.UpdateUserRequest, requestOptions?: JulepApiClient.RequestOptions): Promise<JulepApi.ResourceUpdatedResponse>;
    /**
     *
     */
    deleteUser(userId: string, requestOptions?: JulepApiClient.RequestOptions): Promise<void>;
    /**
     *
     */
    getAgent(agentId: string, requestOptions?: JulepApiClient.RequestOptions): Promise<JulepApi.Agent>;
    /**
     *
     */
    updateAgent(agentId: string, request?: JulepApi.UpdateAgentRequest, requestOptions?: JulepApiClient.RequestOptions): Promise<JulepApi.ResourceUpdatedResponse>;
    /**
     *
     */
    deleteAgent(agentId: string, requestOptions?: JulepApiClient.RequestOptions): Promise<void>;
    /**
     * Sorted (created_at descending)
     */
    getAgentAdditionalInfo(agentId: string, request?: JulepApi.GetAgentAdditionalInfoRequest, requestOptions?: JulepApiClient.RequestOptions): Promise<JulepApi.GetAgentAdditionalInfoResponse>;
    /**
     *
     */
    createAgentAdditionalInfo(agentId: string, request: JulepApi.CreateAdditionalInfoRequest, requestOptions?: JulepApiClient.RequestOptions): Promise<JulepApi.ResourceCreatedResponse>;
    /**
     * Sorted (created_at descending)
     */
    getUserAdditionalInfo(userId: string, request?: JulepApi.GetUserAdditionalInfoRequest, requestOptions?: JulepApiClient.RequestOptions): Promise<JulepApi.GetUserAdditionalInfoResponse>;
    /**
     *
     */
    createUserAdditionalInfo(userId: string, request: JulepApi.CreateAdditionalInfoRequest, requestOptions?: JulepApiClient.RequestOptions): Promise<JulepApi.ResourceCreatedResponse>;
    /**
     *
     */
    deleteUserAdditionalInfo(userId: string, additionalInfoId: string, requestOptions?: JulepApiClient.RequestOptions): Promise<void>;
    /**
     *
     */
    deleteAgentAdditionalInfo(agentId: string, additionalInfoId: string, requestOptions?: JulepApiClient.RequestOptions): Promise<void>;
    /**
     *
     */
    deleteAgentMemory(agentId: string, memoryId: string, requestOptions?: JulepApiClient.RequestOptions): Promise<void>;
    /**
     * Sorted (created_at descending)
     */
    getAgentTools(agentId: string, request?: JulepApi.GetAgentToolsRequest, requestOptions?: JulepApiClient.RequestOptions): Promise<JulepApi.GetAgentToolsResponse>;
    /**
     *
     */
    createAgentTool(agentId: string, request: JulepApi.CreateToolRequest, requestOptions?: JulepApiClient.RequestOptions): Promise<JulepApi.ResourceCreatedResponse>;
    /**
     *
     */
    updateAgentTool(agentId: string, toolId: string, request: JulepApi.UpdateToolRequest, requestOptions?: JulepApiClient.RequestOptions): Promise<JulepApi.ResourceUpdatedResponse>;
    /**
     *
     */
    deleteAgentTool(agentId: string, toolId: string, requestOptions?: JulepApiClient.RequestOptions): Promise<void>;
    protected _getAuthorizationHeader(): Promise<string>;
}
