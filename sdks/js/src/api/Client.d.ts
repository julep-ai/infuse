/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "./environments";
import * as core from "./core";
import * as JulepApi from "./api";
export declare namespace JulepApiClient {
  interface Options {
    environment?: core.Supplier<environments.JulepApiEnvironment | string>;
    apiKey: core.Supplier<string>;
  }
  interface RequestOptions {
    timeoutInSeconds?: number;
    maxRetries?: number;
  }
}
export declare class JulepApiClient {
  protected readonly _options: JulepApiClient.Options;
  constructor(_options: JulepApiClient.Options);
  /**
   * List sessions created (use limit/offset pagination to get large number of sessions; sorted by descending order of `created_at`)
   *
   * @example
   *     await julepApi.listSessions({})
   */
  listSessions(
    request?: JulepApi.ListSessionsRequest,
    requestOptions?: JulepApiClient.RequestOptions,
  ): Promise<JulepApi.ListSessionsResponse>;
  /**
   * Create a session between an agent and a user
   *
   * @example
   *     await julepApi.createSession({
   *         userId: "string",
   *         agentId: "string"
   *     })
   */
  createSession(
    request: JulepApi.CreateSessionRequest,
    requestOptions?: JulepApiClient.RequestOptions,
  ): Promise<JulepApi.ResourceCreatedResponse>;
  /**
   * List users created (use limit/offset pagination to get large number of sessions; sorted by descending order of `created_at`)
   *
   * @example
   *     await julepApi.listUsers({})
   */
  listUsers(
    request?: JulepApi.ListUsersRequest,
    requestOptions?: JulepApiClient.RequestOptions,
  ): Promise<JulepApi.ListUsersResponse>;
  /**
   * Create a new user
   *
   * @example
   *     await julepApi.createUser({
   *         additionalInformation: [{
   *                 title: "string",
   *                 content: "string"
   *             }]
   *     })
   */
  createUser(
    request?: JulepApi.CreateUserRequest,
    requestOptions?: JulepApiClient.RequestOptions,
  ): Promise<JulepApi.ResourceCreatedResponse>;
  /**
   * List agents created (use limit/offset pagination to get large number of sessions; sorted by descending order of `created_at`)
   *
   * @example
   *     await julepApi.listAgents({})
   */
  listAgents(
    request?: JulepApi.ListAgentsRequest,
    requestOptions?: JulepApiClient.RequestOptions,
  ): Promise<JulepApi.ListAgentsResponse>;
  /**
   * Create a new agent
   *
   * @example
   *     await julepApi.createAgent({
   *         name: "string",
   *         about: "string",
   *         instructions: [{
   *                 content: "string"
   *             }],
   *         tools: [{
   *                 type: JulepApi.CreateToolRequestType.Function,
   *                 definition: {
   *                     name: "string",
   *                     parameters: {
   *                         "string": "string"
   *                     }
   *                 }
   *             }],
   *         defaultSettings: {
   *             temperature: 1,
   *             topP: 1
   *         },
   *         model: "string",
   *         additionalInfo: [{
   *                 title: "string",
   *                 content: "string"
   *             }]
   *     })
   */
  createAgent(
    request: JulepApi.CreateAgentRequest,
    requestOptions?: JulepApiClient.RequestOptions,
  ): Promise<JulepApi.ResourceCreatedResponse>;
  /**
   *
   *
   * @example
   *     await julepApi.getSession("string")
   */
  getSession(
    sessionId: string,
    requestOptions?: JulepApiClient.RequestOptions,
  ): Promise<JulepApi.Session>;
  /**
   *
   *
   * @example
   *     await julepApi.updateSession("string", {
   *         situation: "string"
   *     })
   */
  updateSession(
    sessionId: string,
    request: JulepApi.UpdateSessionRequest,
    requestOptions?: JulepApiClient.RequestOptions,
  ): Promise<JulepApi.ResourceUpdatedResponse>;
  /**
   *
   *
   * @example
   *     await julepApi.deleteSession("string")
   */
  deleteSession(
    sessionId: string,
    requestOptions?: JulepApiClient.RequestOptions,
  ): Promise<void>;
  /**
   * Sorted (created_at descending)
   *
   * @example
   *     await julepApi.getSuggestions("string", {})
   */
  getSuggestions(
    sessionId: string,
    request?: JulepApi.GetSuggestionsRequest,
    requestOptions?: JulepApiClient.RequestOptions,
  ): Promise<JulepApi.GetSuggestionsResponse>;
  /**
   * Sorted (created_at ascending)
   *
   * @example
   *     await julepApi.getHistory("string", {})
   */
  getHistory(
    sessionId: string,
    request?: JulepApi.GetHistoryRequest,
    requestOptions?: JulepApiClient.RequestOptions,
  ): Promise<JulepApi.GetHistoryResponse>;
  /**
   *
   *
   * @example
   *     await julepApi.chat("string", {
   *         accept: "application/json",
   *         responseFormat: {
   *             type: JulepApi.ChatSettingsResponseFormatType.Text
   *         },
   *         temperature: 1,
   *         topP: 1,
   *         messages: [{
   *                 role: JulepApi.InputChatMlMessageRole.User,
   *                 content: "string"
   *             }],
   *         tools: [{
   *                 type: JulepApi.ToolType.Function,
   *                 definition: {
   *                     name: "string",
   *                     parameters: {
   *                         "string": "string"
   *                     }
   *                 },
   *                 id: "string"
   *             }]
   *     })
   */
  chat(
    sessionId: string,
    request: JulepApi.ChatInput,
    requestOptions?: JulepApiClient.RequestOptions,
  ): Promise<JulepApi.ChatResponse>;
  /**
   * Sorted (created_at descending)
   *
   * @example
   *     await julepApi.getAgentMemories("string", {
   *         query: "string"
   *     })
   */
  getAgentMemories(
    agentId: string,
    request: JulepApi.GetAgentMemoriesRequest,
    requestOptions?: JulepApiClient.RequestOptions,
  ): Promise<JulepApi.GetAgentMemoriesResponse>;
  /**
   *
   *
   * @example
   *     await julepApi.getUser("string")
   */
  getUser(
    userId: string,
    requestOptions?: JulepApiClient.RequestOptions,
  ): Promise<JulepApi.User>;
  /**
   *
   *
   * @example
   *     await julepApi.updateUser("string", {})
   */
  updateUser(
    userId: string,
    request?: JulepApi.UpdateUserRequest,
    requestOptions?: JulepApiClient.RequestOptions,
  ): Promise<JulepApi.ResourceUpdatedResponse>;
  /**
   *
   *
   * @example
   *     await julepApi.deleteUser("string")
   */
  deleteUser(
    userId: string,
    requestOptions?: JulepApiClient.RequestOptions,
  ): Promise<void>;
  /**
   *
   *
   * @example
   *     await julepApi.getAgent("string")
   */
  getAgent(
    agentId: string,
    requestOptions?: JulepApiClient.RequestOptions,
  ): Promise<JulepApi.Agent>;
  /**
   *
   *
   * @example
   *     await julepApi.updateAgent("string", {
   *         instructions: [{
   *                 content: "string"
   *             }],
   *         defaultSettings: {
   *             temperature: 1,
   *             topP: 1
   *         }
   *     })
   */
  updateAgent(
    agentId: string,
    request?: JulepApi.UpdateAgentRequest,
    requestOptions?: JulepApiClient.RequestOptions,
  ): Promise<JulepApi.ResourceUpdatedResponse>;
  /**
   *
   *
   * @example
   *     await julepApi.deleteAgent("string")
   */
  deleteAgent(
    agentId: string,
    requestOptions?: JulepApiClient.RequestOptions,
  ): Promise<void>;
  /**
   * Sorted (created_at descending)
   *
   * @example
   *     await julepApi.getAgentAdditionalInfo("string", {})
   */
  getAgentAdditionalInfo(
    agentId: string,
    request?: JulepApi.GetAgentAdditionalInfoRequest,
    requestOptions?: JulepApiClient.RequestOptions,
  ): Promise<JulepApi.GetAgentAdditionalInfoResponse>;
  /**
   *
   *
   * @example
   *     await julepApi.createAgentAdditionalInfo("string", {
   *         title: "string",
   *         content: "string"
   *     })
   */
  createAgentAdditionalInfo(
    agentId: string,
    request: JulepApi.CreateAdditionalInfoRequest,
    requestOptions?: JulepApiClient.RequestOptions,
  ): Promise<JulepApi.ResourceCreatedResponse>;
  /**
   * Sorted (created_at descending)
   *
   * @example
   *     await julepApi.getUserAdditionalInfo("string", {})
   */
  getUserAdditionalInfo(
    userId: string,
    request?: JulepApi.GetUserAdditionalInfoRequest,
    requestOptions?: JulepApiClient.RequestOptions,
  ): Promise<JulepApi.GetUserAdditionalInfoResponse>;
  /**
   *
   *
   * @example
   *     await julepApi.createUserAdditionalInfo("string", {
   *         title: "string",
   *         content: "string"
   *     })
   */
  createUserAdditionalInfo(
    userId: string,
    request: JulepApi.CreateAdditionalInfoRequest,
    requestOptions?: JulepApiClient.RequestOptions,
  ): Promise<JulepApi.ResourceCreatedResponse>;
  /**
   *
   *
   * @example
   *     await julepApi.deleteUserAdditionalInfo("string", "string")
   */
  deleteUserAdditionalInfo(
    userId: string,
    additionalInfoId: string,
    requestOptions?: JulepApiClient.RequestOptions,
  ): Promise<void>;
  /**
   *
   *
   * @example
   *     await julepApi.deleteAgentAdditionalInfo("string", "string")
   */
  deleteAgentAdditionalInfo(
    agentId: string,
    additionalInfoId: string,
    requestOptions?: JulepApiClient.RequestOptions,
  ): Promise<void>;
  /**
   *
   *
   * @example
   *     await julepApi.deleteAgentMemory("string", "string")
   */
  deleteAgentMemory(
    agentId: string,
    memoryId: string,
    requestOptions?: JulepApiClient.RequestOptions,
  ): Promise<void>;
  /**
   * Sorted (created_at descending)
   *
   * @example
   *     await julepApi.getAgentTools("string", {})
   */
  getAgentTools(
    agentId: string,
    request?: JulepApi.GetAgentToolsRequest,
    requestOptions?: JulepApiClient.RequestOptions,
  ): Promise<JulepApi.GetAgentToolsResponse>;
  /**
   *
   *
   * @example
   *     await julepApi.createAgentTool("string", {
   *         type: JulepApi.CreateToolRequestType.Function,
   *         definition: {
   *             name: "string",
   *             parameters: {
   *                 "string": "string"
   *             }
   *         }
   *     })
   */
  createAgentTool(
    agentId: string,
    request: JulepApi.CreateToolRequest,
    requestOptions?: JulepApiClient.RequestOptions,
  ): Promise<JulepApi.ResourceCreatedResponse>;
  /**
   *
   *
   * @example
   *     await julepApi.updateAgentTool("string", "string", {
   *         definition: {
   *             name: "string",
   *             parameters: {
   *                 "string": "string"
   *             }
   *         }
   *     })
   */
  updateAgentTool(
    agentId: string,
    toolId: string,
    request: JulepApi.UpdateToolRequest,
    requestOptions?: JulepApiClient.RequestOptions,
  ): Promise<JulepApi.ResourceUpdatedResponse>;
  /**
   *
   *
   * @example
   *     await julepApi.deleteAgentTool("string", "string")
   */
  deleteAgentTool(
    agentId: string,
    toolId: string,
    requestOptions?: JulepApiClient.RequestOptions,
  ): Promise<void>;
  protected _getAuthorizationHeader(): Promise<string>;
}
