"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding =
  (this && this.__createBinding) ||
  (Object.create
    ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (
          !desc ||
          ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)
        ) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            },
          };
        }
        Object.defineProperty(o, k2, desc);
      }
    : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
var __setModuleDefault =
  (this && this.__setModuleDefault) ||
  (Object.create
    ? function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      }
    : function (o, v) {
        o["default"] = v;
      });
var __importStar =
  (this && this.__importStar) ||
  function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod)
        if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
  };
var __awaiter =
  (this && this.__awaiter) ||
  function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P
        ? value
        : new P(function (resolve) {
            resolve(value);
          });
    }
    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done
          ? resolve(result.value)
          : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
var __importDefault =
  (this && this.__importDefault) ||
  function (mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
Object.defineProperty(exports, "__esModule", { value: true });
exports.JulepApiClient = void 0;
const environments = __importStar(require("./environments"));
const core = __importStar(require("./core"));
const url_join_1 = __importDefault(require("url-join"));
const serializers = __importStar(require("./serialization"));
const errors = __importStar(require("./errors"));
class JulepApiClient {
  constructor(_options) {
    this._options = _options;
  }
  /**
   * List sessions created (use limit/offset pagination to get large number of sessions; sorted by descending order of `created_at`)
   *
   * @example
   *     await julepApi.listSessions({})
   */
  listSessions(request = {}, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const { limit, offset } = request;
      const _queryParams = {};
      if (limit != null) {
        _queryParams["limit"] = limit.toString();
      }
      if (offset != null) {
        _queryParams["offset"] = offset.toString();
      }
      const _response = yield core.fetcher({
        url: (0, url_join_1.default)(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.JulepApiEnvironment.Default,
          "api/sessions",
        ),
        method: "GET",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          "X-Fern-Language": "JavaScript",
        },
        contentType: "application/json",
        queryParameters: _queryParams,
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 300000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
      });
      if (_response.ok) {
        return yield serializers.ListSessionsResponse.parseOrThrow(
          _response.body,
          {
            unrecognizedObjectKeys: "passthrough",
            allowUnrecognizedUnionMembers: true,
            allowUnrecognizedEnumValues: true,
            breadcrumbsPrefix: ["response"],
          },
        );
      }
      if (_response.error.reason === "status-code") {
        throw new errors.JulepApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case "non-json":
          throw new errors.JulepApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case "timeout":
          throw new errors.JulepApiTimeoutError();
        case "unknown":
          throw new errors.JulepApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  /**
   * Create a session between an agent and a user
   *
   * @example
   *     await julepApi.createSession({
   *         userId: "user_id",
   *         agentId: "agent_id"
   *     })
   */
  createSession(request, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const _response = yield core.fetcher({
        url: (0, url_join_1.default)(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.JulepApiEnvironment.Default,
          "api/sessions",
        ),
        method: "POST",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          "X-Fern-Language": "JavaScript",
        },
        contentType: "application/json",
        body: yield serializers.CreateSessionRequest.jsonOrThrow(request, {
          unrecognizedObjectKeys: "strip",
        }),
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 300000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
      });
      if (_response.ok) {
        return yield serializers.ResourceCreatedResponse.parseOrThrow(
          _response.body,
          {
            unrecognizedObjectKeys: "passthrough",
            allowUnrecognizedUnionMembers: true,
            allowUnrecognizedEnumValues: true,
            breadcrumbsPrefix: ["response"],
          },
        );
      }
      if (_response.error.reason === "status-code") {
        throw new errors.JulepApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case "non-json":
          throw new errors.JulepApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case "timeout":
          throw new errors.JulepApiTimeoutError();
        case "unknown":
          throw new errors.JulepApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  /**
   * List users created (use limit/offset pagination to get large number of sessions; sorted by descending order of `created_at`)
   *
   * @example
   *     await julepApi.listUsers({})
   */
  listUsers(request = {}, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const { limit, offset } = request;
      const _queryParams = {};
      if (limit != null) {
        _queryParams["limit"] = limit.toString();
      }
      if (offset != null) {
        _queryParams["offset"] = offset.toString();
      }
      const _response = yield core.fetcher({
        url: (0, url_join_1.default)(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.JulepApiEnvironment.Default,
          "api/users",
        ),
        method: "GET",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          "X-Fern-Language": "JavaScript",
        },
        contentType: "application/json",
        queryParameters: _queryParams,
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 300000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
      });
      if (_response.ok) {
        return yield serializers.ListUsersResponse.parseOrThrow(
          _response.body,
          {
            unrecognizedObjectKeys: "passthrough",
            allowUnrecognizedUnionMembers: true,
            allowUnrecognizedEnumValues: true,
            breadcrumbsPrefix: ["response"],
          },
        );
      }
      if (_response.error.reason === "status-code") {
        throw new errors.JulepApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case "non-json":
          throw new errors.JulepApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case "timeout":
          throw new errors.JulepApiTimeoutError();
        case "unknown":
          throw new errors.JulepApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  /**
   * Create a new user
   *
   * @example
   *     await julepApi.createUser({})
   */
  createUser(request = {}, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const _response = yield core.fetcher({
        url: (0, url_join_1.default)(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.JulepApiEnvironment.Default,
          "api/users",
        ),
        method: "POST",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          "X-Fern-Language": "JavaScript",
        },
        contentType: "application/json",
        body: yield serializers.CreateUserRequest.jsonOrThrow(request, {
          unrecognizedObjectKeys: "strip",
        }),
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 300000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
      });
      if (_response.ok) {
        return yield serializers.ResourceCreatedResponse.parseOrThrow(
          _response.body,
          {
            unrecognizedObjectKeys: "passthrough",
            allowUnrecognizedUnionMembers: true,
            allowUnrecognizedEnumValues: true,
            breadcrumbsPrefix: ["response"],
          },
        );
      }
      if (_response.error.reason === "status-code") {
        throw new errors.JulepApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case "non-json":
          throw new errors.JulepApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case "timeout":
          throw new errors.JulepApiTimeoutError();
        case "unknown":
          throw new errors.JulepApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  /**
   * List agents created (use limit/offset pagination to get large number of sessions; sorted by descending order of `created_at`)
   *
   * @example
   *     await julepApi.listAgents({})
   */
  listAgents(request = {}, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const { limit, offset } = request;
      const _queryParams = {};
      if (limit != null) {
        _queryParams["limit"] = limit.toString();
      }
      if (offset != null) {
        _queryParams["offset"] = offset.toString();
      }
      const _response = yield core.fetcher({
        url: (0, url_join_1.default)(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.JulepApiEnvironment.Default,
          "api/agents",
        ),
        method: "GET",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          "X-Fern-Language": "JavaScript",
        },
        contentType: "application/json",
        queryParameters: _queryParams,
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 300000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
      });
      if (_response.ok) {
        return yield serializers.ListAgentsResponse.parseOrThrow(
          _response.body,
          {
            unrecognizedObjectKeys: "passthrough",
            allowUnrecognizedUnionMembers: true,
            allowUnrecognizedEnumValues: true,
            breadcrumbsPrefix: ["response"],
          },
        );
      }
      if (_response.error.reason === "status-code") {
        throw new errors.JulepApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case "non-json":
          throw new errors.JulepApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case "timeout":
          throw new errors.JulepApiTimeoutError();
        case "unknown":
          throw new errors.JulepApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  /**
   * Create a new agent
   *
   * @example
   *     await julepApi.createAgent({
   *         name: "name",
   *         about: "about",
   *         model: "model"
   *     })
   */
  createAgent(request, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const _response = yield core.fetcher({
        url: (0, url_join_1.default)(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.JulepApiEnvironment.Default,
          "api/agents",
        ),
        method: "POST",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          "X-Fern-Language": "JavaScript",
        },
        contentType: "application/json",
        body: yield serializers.CreateAgentRequest.jsonOrThrow(request, {
          unrecognizedObjectKeys: "strip",
        }),
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 300000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
      });
      if (_response.ok) {
        return yield serializers.ResourceCreatedResponse.parseOrThrow(
          _response.body,
          {
            unrecognizedObjectKeys: "passthrough",
            allowUnrecognizedUnionMembers: true,
            allowUnrecognizedEnumValues: true,
            breadcrumbsPrefix: ["response"],
          },
        );
      }
      if (_response.error.reason === "status-code") {
        throw new errors.JulepApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case "non-json":
          throw new errors.JulepApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case "timeout":
          throw new errors.JulepApiTimeoutError();
        case "unknown":
          throw new errors.JulepApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  /**
   *
   *
   * @example
   *     await julepApi.getSession("session_id")
   */
  getSession(sessionId, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const _response = yield core.fetcher({
        url: (0, url_join_1.default)(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.JulepApiEnvironment.Default,
          `api/sessions/${sessionId}`,
        ),
        method: "GET",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          "X-Fern-Language": "JavaScript",
        },
        contentType: "application/json",
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 300000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
      });
      if (_response.ok) {
        return yield serializers.Session.parseOrThrow(_response.body, {
          unrecognizedObjectKeys: "passthrough",
          allowUnrecognizedUnionMembers: true,
          allowUnrecognizedEnumValues: true,
          breadcrumbsPrefix: ["response"],
        });
      }
      if (_response.error.reason === "status-code") {
        throw new errors.JulepApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case "non-json":
          throw new errors.JulepApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case "timeout":
          throw new errors.JulepApiTimeoutError();
        case "unknown":
          throw new errors.JulepApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  /**
   *
   *
   * @example
   *     await julepApi.updateSession("session_id", {
   *         situation: "situation"
   *     })
   */
  updateSession(sessionId, request, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const _response = yield core.fetcher({
        url: (0, url_join_1.default)(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.JulepApiEnvironment.Default,
          `api/sessions/${sessionId}`,
        ),
        method: "PUT",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          "X-Fern-Language": "JavaScript",
        },
        contentType: "application/json",
        body: yield serializers.UpdateSessionRequest.jsonOrThrow(request, {
          unrecognizedObjectKeys: "strip",
        }),
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 300000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
      });
      if (_response.ok) {
        return yield serializers.ResourceUpdatedResponse.parseOrThrow(
          _response.body,
          {
            unrecognizedObjectKeys: "passthrough",
            allowUnrecognizedUnionMembers: true,
            allowUnrecognizedEnumValues: true,
            breadcrumbsPrefix: ["response"],
          },
        );
      }
      if (_response.error.reason === "status-code") {
        throw new errors.JulepApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case "non-json":
          throw new errors.JulepApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case "timeout":
          throw new errors.JulepApiTimeoutError();
        case "unknown":
          throw new errors.JulepApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  /**
   *
   *
   * @example
   *     await julepApi.deleteSession("session_id")
   */
  deleteSession(sessionId, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const _response = yield core.fetcher({
        url: (0, url_join_1.default)(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.JulepApiEnvironment.Default,
          `api/sessions/${sessionId}`,
        ),
        method: "DELETE",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          "X-Fern-Language": "JavaScript",
        },
        contentType: "application/json",
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 300000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
      });
      if (_response.ok) {
        return;
      }
      if (_response.error.reason === "status-code") {
        throw new errors.JulepApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case "non-json":
          throw new errors.JulepApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case "timeout":
          throw new errors.JulepApiTimeoutError();
        case "unknown":
          throw new errors.JulepApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  /**
   * Sorted (created_at descending)
   *
   * @example
   *     await julepApi.getSuggestions("session_id", {})
   */
  getSuggestions(sessionId, request = {}, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const { limit, offset } = request;
      const _queryParams = {};
      if (limit != null) {
        _queryParams["limit"] = limit.toString();
      }
      if (offset != null) {
        _queryParams["offset"] = offset.toString();
      }
      const _response = yield core.fetcher({
        url: (0, url_join_1.default)(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.JulepApiEnvironment.Default,
          `api/sessions/${sessionId}/suggestions`,
        ),
        method: "GET",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          "X-Fern-Language": "JavaScript",
        },
        contentType: "application/json",
        queryParameters: _queryParams,
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 300000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
      });
      if (_response.ok) {
        return yield serializers.GetSuggestionsResponse.parseOrThrow(
          _response.body,
          {
            unrecognizedObjectKeys: "passthrough",
            allowUnrecognizedUnionMembers: true,
            allowUnrecognizedEnumValues: true,
            breadcrumbsPrefix: ["response"],
          },
        );
      }
      if (_response.error.reason === "status-code") {
        throw new errors.JulepApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case "non-json":
          throw new errors.JulepApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case "timeout":
          throw new errors.JulepApiTimeoutError();
        case "unknown":
          throw new errors.JulepApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  /**
   * Sorted (created_at ascending)
   *
   * @example
   *     await julepApi.getHistory("session_id", {})
   */
  getHistory(sessionId, request = {}, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const { limit, offset } = request;
      const _queryParams = {};
      if (limit != null) {
        _queryParams["limit"] = limit.toString();
      }
      if (offset != null) {
        _queryParams["offset"] = offset.toString();
      }
      const _response = yield core.fetcher({
        url: (0, url_join_1.default)(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.JulepApiEnvironment.Default,
          `api/sessions/${sessionId}/history`,
        ),
        method: "GET",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          "X-Fern-Language": "JavaScript",
        },
        contentType: "application/json",
        queryParameters: _queryParams,
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 300000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
      });
      if (_response.ok) {
        return yield serializers.GetHistoryResponse.parseOrThrow(
          _response.body,
          {
            unrecognizedObjectKeys: "passthrough",
            allowUnrecognizedUnionMembers: true,
            allowUnrecognizedEnumValues: true,
            breadcrumbsPrefix: ["response"],
          },
        );
      }
      if (_response.error.reason === "status-code") {
        throw new errors.JulepApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case "non-json":
          throw new errors.JulepApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case "timeout":
          throw new errors.JulepApiTimeoutError();
        case "unknown":
          throw new errors.JulepApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  /**
   *
   *
   * @example
   *     await julepApi.chat("session_id", {
   *         accept: "application/json",
   *         messages: [{
   *                 role: JulepApi.InputChatMlMessageRole.User,
   *                 content: "content"
   *             }]
   *     })
   */
  chat(sessionId, request, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const _response = yield core.fetcher({
        url: (0, url_join_1.default)(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.JulepApiEnvironment.Default,
          `api/sessions/${sessionId}/chat`,
        ),
        method: "POST",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          "X-Fern-Language": "JavaScript",
          Accept: "application/json",
        },
        contentType: "application/json",
        body: yield serializers.ChatInput.jsonOrThrow(request, {
          unrecognizedObjectKeys: "strip",
        }),
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 300000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
      });
      if (_response.ok) {
        return yield serializers.ChatResponse.parseOrThrow(_response.body, {
          unrecognizedObjectKeys: "passthrough",
          allowUnrecognizedUnionMembers: true,
          allowUnrecognizedEnumValues: true,
          breadcrumbsPrefix: ["response"],
        });
      }
      if (_response.error.reason === "status-code") {
        throw new errors.JulepApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case "non-json":
          throw new errors.JulepApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case "timeout":
          throw new errors.JulepApiTimeoutError();
        case "unknown":
          throw new errors.JulepApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  /**
   * Sorted (created_at descending)
   *
   * @example
   *     await julepApi.getAgentMemories("agent_id", {
   *         query: "query"
   *     })
   */
  getAgentMemories(agentId, request, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const { query, types, userId, limit, offset } = request;
      const _queryParams = {};
      _queryParams["query"] = query;
      if (types != null) {
        if (Array.isArray(types)) {
          _queryParams["types"] = types.map((item) => item);
        } else {
          _queryParams["types"] = types;
        }
      }
      if (userId != null) {
        _queryParams["user_id"] = userId;
      }
      if (limit != null) {
        _queryParams["limit"] = limit.toString();
      }
      if (offset != null) {
        _queryParams["offset"] = offset.toString();
      }
      const _response = yield core.fetcher({
        url: (0, url_join_1.default)(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.JulepApiEnvironment.Default,
          `api/agents/${agentId}/memories`,
        ),
        method: "GET",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          "X-Fern-Language": "JavaScript",
        },
        contentType: "application/json",
        queryParameters: _queryParams,
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 300000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
      });
      if (_response.ok) {
        return yield serializers.GetAgentMemoriesResponse.parseOrThrow(
          _response.body,
          {
            unrecognizedObjectKeys: "passthrough",
            allowUnrecognizedUnionMembers: true,
            allowUnrecognizedEnumValues: true,
            breadcrumbsPrefix: ["response"],
          },
        );
      }
      if (_response.error.reason === "status-code") {
        throw new errors.JulepApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case "non-json":
          throw new errors.JulepApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case "timeout":
          throw new errors.JulepApiTimeoutError();
        case "unknown":
          throw new errors.JulepApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  /**
   *
   *
   * @example
   *     await julepApi.getUser("user_id")
   */
  getUser(userId, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const _response = yield core.fetcher({
        url: (0, url_join_1.default)(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.JulepApiEnvironment.Default,
          `api/users/${userId}`,
        ),
        method: "GET",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          "X-Fern-Language": "JavaScript",
        },
        contentType: "application/json",
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 300000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
      });
      if (_response.ok) {
        return yield serializers.User.parseOrThrow(_response.body, {
          unrecognizedObjectKeys: "passthrough",
          allowUnrecognizedUnionMembers: true,
          allowUnrecognizedEnumValues: true,
          breadcrumbsPrefix: ["response"],
        });
      }
      if (_response.error.reason === "status-code") {
        throw new errors.JulepApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case "non-json":
          throw new errors.JulepApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case "timeout":
          throw new errors.JulepApiTimeoutError();
        case "unknown":
          throw new errors.JulepApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  /**
   *
   *
   * @example
   *     await julepApi.updateUser("user_id", {})
   */
  updateUser(userId, request = {}, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const _response = yield core.fetcher({
        url: (0, url_join_1.default)(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.JulepApiEnvironment.Default,
          `api/users/${userId}`,
        ),
        method: "PUT",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          "X-Fern-Language": "JavaScript",
        },
        contentType: "application/json",
        body: yield serializers.UpdateUserRequest.jsonOrThrow(request, {
          unrecognizedObjectKeys: "strip",
        }),
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 300000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
      });
      if (_response.ok) {
        return yield serializers.ResourceUpdatedResponse.parseOrThrow(
          _response.body,
          {
            unrecognizedObjectKeys: "passthrough",
            allowUnrecognizedUnionMembers: true,
            allowUnrecognizedEnumValues: true,
            breadcrumbsPrefix: ["response"],
          },
        );
      }
      if (_response.error.reason === "status-code") {
        throw new errors.JulepApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case "non-json":
          throw new errors.JulepApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case "timeout":
          throw new errors.JulepApiTimeoutError();
        case "unknown":
          throw new errors.JulepApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  /**
   *
   *
   * @example
   *     await julepApi.deleteUser("user_id")
   */
  deleteUser(userId, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const _response = yield core.fetcher({
        url: (0, url_join_1.default)(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.JulepApiEnvironment.Default,
          `api/users/${userId}`,
        ),
        method: "DELETE",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          "X-Fern-Language": "JavaScript",
        },
        contentType: "application/json",
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 300000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
      });
      if (_response.ok) {
        return;
      }
      if (_response.error.reason === "status-code") {
        throw new errors.JulepApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case "non-json":
          throw new errors.JulepApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case "timeout":
          throw new errors.JulepApiTimeoutError();
        case "unknown":
          throw new errors.JulepApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  /**
   *
   *
   * @example
   *     await julepApi.getAgent("agent_id")
   */
  getAgent(agentId, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const _response = yield core.fetcher({
        url: (0, url_join_1.default)(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.JulepApiEnvironment.Default,
          `api/agents/${agentId}`,
        ),
        method: "GET",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          "X-Fern-Language": "JavaScript",
        },
        contentType: "application/json",
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 300000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
      });
      if (_response.ok) {
        return yield serializers.Agent.parseOrThrow(_response.body, {
          unrecognizedObjectKeys: "passthrough",
          allowUnrecognizedUnionMembers: true,
          allowUnrecognizedEnumValues: true,
          breadcrumbsPrefix: ["response"],
        });
      }
      if (_response.error.reason === "status-code") {
        throw new errors.JulepApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case "non-json":
          throw new errors.JulepApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case "timeout":
          throw new errors.JulepApiTimeoutError();
        case "unknown":
          throw new errors.JulepApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  /**
   *
   *
   * @example
   *     await julepApi.updateAgent("agent_id", {})
   */
  updateAgent(agentId, request = {}, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const _response = yield core.fetcher({
        url: (0, url_join_1.default)(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.JulepApiEnvironment.Default,
          `api/agents/${agentId}`,
        ),
        method: "PUT",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          "X-Fern-Language": "JavaScript",
        },
        contentType: "application/json",
        body: yield serializers.UpdateAgentRequest.jsonOrThrow(request, {
          unrecognizedObjectKeys: "strip",
        }),
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 300000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
      });
      if (_response.ok) {
        return yield serializers.ResourceUpdatedResponse.parseOrThrow(
          _response.body,
          {
            unrecognizedObjectKeys: "passthrough",
            allowUnrecognizedUnionMembers: true,
            allowUnrecognizedEnumValues: true,
            breadcrumbsPrefix: ["response"],
          },
        );
      }
      if (_response.error.reason === "status-code") {
        throw new errors.JulepApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case "non-json":
          throw new errors.JulepApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case "timeout":
          throw new errors.JulepApiTimeoutError();
        case "unknown":
          throw new errors.JulepApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  /**
   *
   *
   * @example
   *     await julepApi.deleteAgent("agent_id")
   */
  deleteAgent(agentId, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const _response = yield core.fetcher({
        url: (0, url_join_1.default)(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.JulepApiEnvironment.Default,
          `api/agents/${agentId}`,
        ),
        method: "DELETE",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          "X-Fern-Language": "JavaScript",
        },
        contentType: "application/json",
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 300000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
      });
      if (_response.ok) {
        return;
      }
      if (_response.error.reason === "status-code") {
        throw new errors.JulepApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case "non-json":
          throw new errors.JulepApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case "timeout":
          throw new errors.JulepApiTimeoutError();
        case "unknown":
          throw new errors.JulepApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  /**
   * Sorted (created_at descending)
   *
   * @example
   *     await julepApi.getAgentAdditionalInfo("agent_id", {})
   */
  getAgentAdditionalInfo(agentId, request = {}, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const { limit, offset } = request;
      const _queryParams = {};
      if (limit != null) {
        _queryParams["limit"] = limit.toString();
      }
      if (offset != null) {
        _queryParams["offset"] = offset.toString();
      }
      const _response = yield core.fetcher({
        url: (0, url_join_1.default)(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.JulepApiEnvironment.Default,
          `api/agents/${agentId}/additional_info`,
        ),
        method: "GET",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          "X-Fern-Language": "JavaScript",
        },
        contentType: "application/json",
        queryParameters: _queryParams,
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 300000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
      });
      if (_response.ok) {
        return yield serializers.GetAgentAdditionalInfoResponse.parseOrThrow(
          _response.body,
          {
            unrecognizedObjectKeys: "passthrough",
            allowUnrecognizedUnionMembers: true,
            allowUnrecognizedEnumValues: true,
            breadcrumbsPrefix: ["response"],
          },
        );
      }
      if (_response.error.reason === "status-code") {
        throw new errors.JulepApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case "non-json":
          throw new errors.JulepApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case "timeout":
          throw new errors.JulepApiTimeoutError();
        case "unknown":
          throw new errors.JulepApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  /**
   *
   *
   * @example
   *     await julepApi.createAgentAdditionalInfo("agent_id", {
   *         title: "title",
   *         content: "content"
   *     })
   */
  createAgentAdditionalInfo(agentId, request, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const _response = yield core.fetcher({
        url: (0, url_join_1.default)(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.JulepApiEnvironment.Default,
          `api/agents/${agentId}/additional_info`,
        ),
        method: "POST",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          "X-Fern-Language": "JavaScript",
        },
        contentType: "application/json",
        body: yield serializers.CreateAdditionalInfoRequest.jsonOrThrow(
          request,
          {
            unrecognizedObjectKeys: "strip",
          },
        ),
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 300000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
      });
      if (_response.ok) {
        return yield serializers.ResourceCreatedResponse.parseOrThrow(
          _response.body,
          {
            unrecognizedObjectKeys: "passthrough",
            allowUnrecognizedUnionMembers: true,
            allowUnrecognizedEnumValues: true,
            breadcrumbsPrefix: ["response"],
          },
        );
      }
      if (_response.error.reason === "status-code") {
        throw new errors.JulepApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case "non-json":
          throw new errors.JulepApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case "timeout":
          throw new errors.JulepApiTimeoutError();
        case "unknown":
          throw new errors.JulepApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  /**
   * Sorted (created_at descending)
   *
   * @example
   *     await julepApi.getUserAdditionalInfo("user_id", {})
   */
  getUserAdditionalInfo(userId, request = {}, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const { limit, offset } = request;
      const _queryParams = {};
      if (limit != null) {
        _queryParams["limit"] = limit.toString();
      }
      if (offset != null) {
        _queryParams["offset"] = offset.toString();
      }
      const _response = yield core.fetcher({
        url: (0, url_join_1.default)(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.JulepApiEnvironment.Default,
          `api/users/${userId}/additional_info`,
        ),
        method: "GET",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          "X-Fern-Language": "JavaScript",
        },
        contentType: "application/json",
        queryParameters: _queryParams,
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 300000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
      });
      if (_response.ok) {
        return yield serializers.GetUserAdditionalInfoResponse.parseOrThrow(
          _response.body,
          {
            unrecognizedObjectKeys: "passthrough",
            allowUnrecognizedUnionMembers: true,
            allowUnrecognizedEnumValues: true,
            breadcrumbsPrefix: ["response"],
          },
        );
      }
      if (_response.error.reason === "status-code") {
        throw new errors.JulepApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case "non-json":
          throw new errors.JulepApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case "timeout":
          throw new errors.JulepApiTimeoutError();
        case "unknown":
          throw new errors.JulepApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  /**
   *
   *
   * @example
   *     await julepApi.createUserAdditionalInfo("user_id", {
   *         title: "title",
   *         content: "content"
   *     })
   */
  createUserAdditionalInfo(userId, request, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const _response = yield core.fetcher({
        url: (0, url_join_1.default)(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.JulepApiEnvironment.Default,
          `api/users/${userId}/additional_info`,
        ),
        method: "POST",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          "X-Fern-Language": "JavaScript",
        },
        contentType: "application/json",
        body: yield serializers.CreateAdditionalInfoRequest.jsonOrThrow(
          request,
          {
            unrecognizedObjectKeys: "strip",
          },
        ),
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 300000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
      });
      if (_response.ok) {
        return yield serializers.ResourceCreatedResponse.parseOrThrow(
          _response.body,
          {
            unrecognizedObjectKeys: "passthrough",
            allowUnrecognizedUnionMembers: true,
            allowUnrecognizedEnumValues: true,
            breadcrumbsPrefix: ["response"],
          },
        );
      }
      if (_response.error.reason === "status-code") {
        throw new errors.JulepApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case "non-json":
          throw new errors.JulepApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case "timeout":
          throw new errors.JulepApiTimeoutError();
        case "unknown":
          throw new errors.JulepApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  /**
   *
   *
   * @example
   *     await julepApi.deleteUserAdditionalInfo("user_id", "additional_info_id")
   */
  deleteUserAdditionalInfo(userId, additionalInfoId, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const _response = yield core.fetcher({
        url: (0, url_join_1.default)(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.JulepApiEnvironment.Default,
          `api/users/${userId}/additional_info/${additionalInfoId}`,
        ),
        method: "DELETE",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          "X-Fern-Language": "JavaScript",
        },
        contentType: "application/json",
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 300000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
      });
      if (_response.ok) {
        return;
      }
      if (_response.error.reason === "status-code") {
        throw new errors.JulepApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case "non-json":
          throw new errors.JulepApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case "timeout":
          throw new errors.JulepApiTimeoutError();
        case "unknown":
          throw new errors.JulepApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  /**
   *
   *
   * @example
   *     await julepApi.deleteAgentAdditionalInfo("agent_id", "additional_info_id")
   */
  deleteAgentAdditionalInfo(agentId, additionalInfoId, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const _response = yield core.fetcher({
        url: (0, url_join_1.default)(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.JulepApiEnvironment.Default,
          `api/agents/${agentId}/additional_info/${additionalInfoId}`,
        ),
        method: "DELETE",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          "X-Fern-Language": "JavaScript",
        },
        contentType: "application/json",
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 300000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
      });
      if (_response.ok) {
        return;
      }
      if (_response.error.reason === "status-code") {
        throw new errors.JulepApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case "non-json":
          throw new errors.JulepApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case "timeout":
          throw new errors.JulepApiTimeoutError();
        case "unknown":
          throw new errors.JulepApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  /**
   *
   *
   * @example
   *     await julepApi.deleteAgentMemory("agent_id", "memory_id")
   */
  deleteAgentMemory(agentId, memoryId, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const _response = yield core.fetcher({
        url: (0, url_join_1.default)(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.JulepApiEnvironment.Default,
          `api/agents/${agentId}/memories/${memoryId}`,
        ),
        method: "DELETE",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          "X-Fern-Language": "JavaScript",
        },
        contentType: "application/json",
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 300000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
      });
      if (_response.ok) {
        return;
      }
      if (_response.error.reason === "status-code") {
        throw new errors.JulepApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case "non-json":
          throw new errors.JulepApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case "timeout":
          throw new errors.JulepApiTimeoutError();
        case "unknown":
          throw new errors.JulepApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  /**
   * Sorted (created_at descending)
   *
   * @example
   *     await julepApi.getAgentTools("agent_id", {})
   */
  getAgentTools(agentId, request = {}, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const { limit, offset } = request;
      const _queryParams = {};
      if (limit != null) {
        _queryParams["limit"] = limit.toString();
      }
      if (offset != null) {
        _queryParams["offset"] = offset.toString();
      }
      const _response = yield core.fetcher({
        url: (0, url_join_1.default)(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.JulepApiEnvironment.Default,
          `api/agents/${agentId}/tools`,
        ),
        method: "GET",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          "X-Fern-Language": "JavaScript",
        },
        contentType: "application/json",
        queryParameters: _queryParams,
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 300000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
      });
      if (_response.ok) {
        return yield serializers.GetAgentToolsResponse.parseOrThrow(
          _response.body,
          {
            unrecognizedObjectKeys: "passthrough",
            allowUnrecognizedUnionMembers: true,
            allowUnrecognizedEnumValues: true,
            breadcrumbsPrefix: ["response"],
          },
        );
      }
      if (_response.error.reason === "status-code") {
        throw new errors.JulepApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case "non-json":
          throw new errors.JulepApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case "timeout":
          throw new errors.JulepApiTimeoutError();
        case "unknown":
          throw new errors.JulepApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  /**
   *
   *
   * @example
   *     await julepApi.createAgentTool("agent_id", {
   *         type: JulepApi.CreateToolRequestType.Function,
   *         definition: {
   *             name: "name",
   *             parameters: {}
   *         }
   *     })
   */
  createAgentTool(agentId, request, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const _response = yield core.fetcher({
        url: (0, url_join_1.default)(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.JulepApiEnvironment.Default,
          `api/agents/${agentId}/tools`,
        ),
        method: "POST",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          "X-Fern-Language": "JavaScript",
        },
        contentType: "application/json",
        body: yield serializers.CreateToolRequest.jsonOrThrow(request, {
          unrecognizedObjectKeys: "strip",
        }),
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 300000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
      });
      if (_response.ok) {
        return yield serializers.ResourceCreatedResponse.parseOrThrow(
          _response.body,
          {
            unrecognizedObjectKeys: "passthrough",
            allowUnrecognizedUnionMembers: true,
            allowUnrecognizedEnumValues: true,
            breadcrumbsPrefix: ["response"],
          },
        );
      }
      if (_response.error.reason === "status-code") {
        throw new errors.JulepApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case "non-json":
          throw new errors.JulepApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case "timeout":
          throw new errors.JulepApiTimeoutError();
        case "unknown":
          throw new errors.JulepApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  /**
   *
   *
   * @example
   *     await julepApi.updateAgentTool("agent_id", "tool_id", {
   *         definition: {
   *             name: "name",
   *             parameters: {}
   *         }
   *     })
   */
  updateAgentTool(agentId, toolId, request, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const _response = yield core.fetcher({
        url: (0, url_join_1.default)(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.JulepApiEnvironment.Default,
          `api/agents/${agentId}/tools/${toolId}`,
        ),
        method: "PUT",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          "X-Fern-Language": "JavaScript",
        },
        contentType: "application/json",
        body: yield serializers.UpdateToolRequest.jsonOrThrow(request, {
          unrecognizedObjectKeys: "strip",
        }),
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 300000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
      });
      if (_response.ok) {
        return yield serializers.ResourceUpdatedResponse.parseOrThrow(
          _response.body,
          {
            unrecognizedObjectKeys: "passthrough",
            allowUnrecognizedUnionMembers: true,
            allowUnrecognizedEnumValues: true,
            breadcrumbsPrefix: ["response"],
          },
        );
      }
      if (_response.error.reason === "status-code") {
        throw new errors.JulepApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case "non-json":
          throw new errors.JulepApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case "timeout":
          throw new errors.JulepApiTimeoutError();
        case "unknown":
          throw new errors.JulepApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  /**
   *
   *
   * @example
   *     await julepApi.deleteAgentTool("agent_id", "tool_id")
   */
  deleteAgentTool(agentId, toolId, requestOptions) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      const _response = yield core.fetcher({
        url: (0, url_join_1.default)(
          (_a = yield core.Supplier.get(this._options.environment)) !== null &&
            _a !== void 0
            ? _a
            : environments.JulepApiEnvironment.Default,
          `api/agents/${agentId}/tools/${toolId}`,
        ),
        method: "DELETE",
        headers: {
          Authorization: yield this._getAuthorizationHeader(),
          "X-Fern-Language": "JavaScript",
        },
        contentType: "application/json",
        timeoutMs:
          (requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.timeoutInSeconds) != null
            ? requestOptions.timeoutInSeconds * 1000
            : 300000,
        maxRetries:
          requestOptions === null || requestOptions === void 0
            ? void 0
            : requestOptions.maxRetries,
      });
      if (_response.ok) {
        return;
      }
      if (_response.error.reason === "status-code") {
        throw new errors.JulepApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.body,
        });
      }
      switch (_response.error.reason) {
        case "non-json":
          throw new errors.JulepApiError({
            statusCode: _response.error.statusCode,
            body: _response.error.rawBody,
          });
        case "timeout":
          throw new errors.JulepApiTimeoutError();
        case "unknown":
          throw new errors.JulepApiError({
            message: _response.error.errorMessage,
          });
      }
    });
  }
  _getAuthorizationHeader() {
    return __awaiter(this, void 0, void 0, function* () {
      const value = yield core.Supplier.get(this._options.apiKey);
      return value;
    });
  }
}
exports.JulepApiClient = JulepApiClient;
