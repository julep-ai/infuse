{
  "openapi": "3.0.3",
  "info": {
    "title": "Julep Agents API",
    "description": "This is a sample description about this spec.",
    "termsOfService": "",
    "contact": {
      "email": ""
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "externalDocs": {
    "description": "Find out more about spec",
    "url": ""
  },
  "servers": [
    {
      "url": "https://api.julep.ai",
      "description": "",
      "varibles": {}
    }
  ],
  "tags": [
    {
      "name": "Default",
      "description": ""
    }
  ],
  "paths": {
    "/sessions": {
      "post": {
        "summary": "Create a new session",
        "description": "",
        "operationId": "CreateSession",
        "tags": [],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSessionRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List sessions",
        "description": "",
        "operationId": "ListSessions",
        "tags": [],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "",
            "schema": {
              "type": "integer",
              "exclusiveMinimum": true,
              "exclusiveMaximum": true,
              "default": 10,
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "",
            "schema": {
              "type": "integer",
              "exclusiveMinimum": true,
              "default": 0,
              "minimum": 0
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$schema": "http://json-schema.org/draft-04/schema#",
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Session"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "post": {
        "summary": "Create a new user",
        "description": "",
        "operationId": "CreateUser",
        "tags": [],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List users",
        "description": "",
        "operationId": "ListUsers",
        "tags": [],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "",
            "schema": {
              "type": "integer",
              "default": 10,
              "exclusiveMinimum": true,
              "minimum": 1,
              "exclusiveMaximum": true,
              "maximum": 100
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$schema": "http://json-schema.org/draft-04/schema#",
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/agents": {
      "post": {
        "summary": "Create a new agent",
        "description": "",
        "operationId": "CreateAgent",
        "tags": [],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAgentRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Agent"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List agents",
        "description": "",
        "operationId": "ListAgents",
        "tags": [],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "",
            "schema": {
              "type": "integer",
              "default": 10,
              "exclusiveMinimum": true,
              "minimum": 1,
              "exclusiveMaximum": true,
              "maximum": 100
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "",
            "schema": {
              "type": "integer",
              "exclusiveMinimum": true,
              "default": 0,
              "minimum": 0
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$schema": "http://json-schema.org/draft-04/schema#",
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Agent"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sessions/{session_id}": {
      "get": {
        "summary": "Get details of the session",
        "description": "",
        "operationId": "GetSession",
        "tags": [],
        "parameters": [],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete session",
        "description": "",
        "operationId": "DeleteSession",
        "tags": [],
        "parameters": [],
        "requestBody": {},
        "responses": {
          "202": {}
        }
      },
      "put": {
        "summary": "Update session parameters",
        "description": "",
        "operationId": "UpdateSession",
        "tags": [],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSessionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "session_id",
          "description": "",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ]
    },
    "/sessions/{session_id}/suggestions": {
      "get": {
        "summary": "Get autogenerated suggestions for session user and agent",
        "description": "",
        "operationId": "GetSuggestions",
        "tags": [],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "",
            "schema": {
              "type": "integer",
              "default": 10,
              "exclusiveMinimum": true,
              "exclusiveMaximum": true,
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "",
            "schema": {
              "type": "integer",
              "default": 0,
              "exclusiveMinimum": true,
              "minimum": 0
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$schema": "http://json-schema.org/draft-04/schema#",
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Suggestion"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "session_id",
          "description": "",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ]
    },
    "/sessions/{session_id}/history": {
      "get": {
        "summary": "Get all messages in a session",
        "description": "",
        "operationId": "GetHistory",
        "tags": [],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "",
            "schema": {
              "type": "integer",
              "default": 10,
              "exclusiveMinimum": true,
              "exclusiveMaximum": true,
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "",
            "schema": {
              "type": "integer",
              "default": 0,
              "exclusiveMinimum": true,
              "minimum": 0
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$schema": "http://json-schema.org/draft-04/schema#",
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ChatMLMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "session_id",
          "description": "",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ]
    },
    "/sessions/{session_id}/chat": {
      "parameters": [
        {
          "in": "path",
          "name": "session_id",
          "description": "",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Interact with the session",
        "description": "",
        "operationId": "Chat",
        "tags": [],
        "parameters": [
          {
            "in": "header",
            "name": "Accept",
            "description": "",
            "schema": {
              "type": "string",
              "default": "application/json",
              "enum": [
                "application/json",
                "text/event-stream"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatResponse"
                }
              }
            }
          }
        }
      }
    },
    "/agents/{agent_id}/memories": {
      "get": {
        "summary": "Get memories of the agent",
        "description": "",
        "operationId": "",
        "tags": [],
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "description": "",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "types",
            "description": "episode, belief, entity",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true
            }
          },
          {
            "in": "query",
            "name": "user_id",
            "description": "",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "description": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$schema": "http://json-schema.org/draft-04/schema#",
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Memory"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "agent_id",
          "description": "",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ]
    },
    "/users/{user_id}": {
      "get": {
        "summary": "Get details of the user",
        "description": "",
        "operationId": "GetUser",
        "tags": [],
        "parameters": [],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete user",
        "description": "",
        "operationId": "DeleteUser",
        "tags": [],
        "parameters": [],
        "requestBody": {},
        "responses": {
          "202": {}
        }
      },
      "put": {
        "summary": "Update user parameters",
        "description": "",
        "operationId": "UpdateUser",
        "tags": [],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "user_id",
          "description": "",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ]
    },
    "/agents/{agent_id}": {
      "get": {
        "summary": "Get details of the agent",
        "description": "",
        "operationId": "GetAgent",
        "tags": [],
        "parameters": [],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Agent"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete agent",
        "description": "",
        "operationId": "DeleteAgent",
        "tags": [],
        "parameters": [],
        "requestBody": {},
        "responses": {
          "202": {}
        }
      },
      "put": {
        "summary": "Update agent parameters",
        "description": "",
        "operationId": "UpdateAgent",
        "tags": [],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAgentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Agent"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "agent_id",
          "description": "",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ]
    },
    "/agents/{agent_id}/additional_info": {
      "get": {
        "summary": "Get additional info of the agent",
        "description": "",
        "operationId": "",
        "tags": [],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {}
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$schema": "http://json-schema.org/draft-04/schema#",
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AdditionalInfo"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "agent_id",
          "description": "",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Create additional info of the agent",
        "description": "",
        "operationId": "",
        "tags": [],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAdditionalInfoRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/additional_info": {
      "get": {
        "summary": "Get additional info of the user",
        "description": "",
        "operationId": "",
        "tags": [],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {}
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$schema": "http://json-schema.org/draft-04/schema#",
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AdditionalInfo"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "user_id",
          "description": "",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Create additional info of the user",
        "description": "",
        "operationId": "",
        "tags": [],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAdditionalInfoRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/additional_info/{additional_info_id}": {
      "parameters": [
        {
          "in": "path",
          "name": "user_id",
          "description": "",
          "schema": {
            "type": "string"
          },
          "required": true
        },
        {
          "in": "path",
          "name": "additional_info_id",
          "description": "",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "delete": {
        "summary": "Delete additional info doc by id",
        "description": "",
        "operationId": "",
        "tags": [],
        "parameters": [],
        "requestBody": {},
        "responses": {
          "202": {}
        }
      }
    },
    "/agents/{agent_id}/additional_info/{additional_info_id}": {
      "parameters": [
        {
          "in": "path",
          "name": "agent_id",
          "description": "",
          "schema": {
            "type": "string"
          },
          "required": true
        },
        {
          "in": "path",
          "name": "additional_info_id",
          "description": "",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "delete": {
        "summary": "Delete additional info doc by id",
        "description": "",
        "operationId": "",
        "tags": [],
        "parameters": [],
        "requestBody": {},
        "responses": {
          "202": {}
        }
      }
    },
    "/agents/{agent_id}/memories/{memory_id}": {
      "delete": {
        "summary": "Delete memory of the agent by id",
        "description": "",
        "operationId": "",
        "tags": [],
        "parameters": [],
        "requestBody": {},
        "responses": {
          "202": {
            "content": {}
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "agent_id",
          "description": "",
          "schema": {
            "type": "string"
          },
          "required": true
        },
        {
          "in": "path",
          "name": "memory_id",
          "description": "",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ]
    }
  },
  "components": {
    "schemas": {
      "User": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the user",
            "default": "User"
          },
          "about": {
            "type": "string",
            "description": "About the user"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "User created at (RFC-3339 format)"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "User updated at (RFC-3339 format)"
          },
          "id": {
            "type": "string",
            "description": "User id (UUID)",
            "format": "uuid"
          }
        },
        "required": [
          "id"
        ]
      },
      "Agent": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the agent"
          },
          "about": {
            "type": "string",
            "description": "About the agent"
          },
          "instructions": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Instruction for the agent"
            },
            "description": "List of instructions for the agent"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Agent created at (RFC-3339 format)"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Agent updated at (RFC-3339 format)"
          },
          "tools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tool",
              "description": "Description and parameters of tool"
            },
            "description": "A list of tools the model may call. Currently, only `function`s are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for."
          },
          "id": {
            "type": "string",
            "description": "Agent id (UUID)",
            "format": "uuid"
          },
          "default_settings": {
            "$ref": "#/components/schemas/AgentDefaultSettings",
            "description": "Default settings for all sessions created by this agent"
          },
          "model": {
            "type": "string",
            "description": "The model to use with this agent",
            "default": "julep-ai/samantha-1-turbo"
          }
        },
        "required": [
          "name",
          "about",
          "id",
          "model"
        ]
      },
      "FunctionParameters": {
        "type": "object",
        "description": "The parameters the functions accepts, described as a JSON Schema object.",
        "additionalProperties": true,
        "properties": {}
      },
      "FunctionDef": {
        "type": "object",
        "deprecated": true,
        "properties": {
          "description": {
            "type": "string",
            "description": "A description of what the function does, used by the model to choose when and how to call the function."
          },
          "name": {
            "type": "string",
            "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
          },
          "parameters": {
            "$ref": "#/components/schemas/FunctionParameters",
            "description": "Parameters accepeted by this function"
          }
        },
        "required": [
          "name",
          "parameters"
        ]
      },
      "Tool": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "function",
              "webhook"
            ],
            "description": "Whether this tool is a `function` or a `webhook` (Only `function` tool supported right now)"
          },
          "definition": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/FunctionDef"
              }
            ],
            "description": "Function definition and parameters"
          }
        },
        "required": [
          "type",
          "definition"
        ]
      },
      "Session": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Session id (UUID)",
            "format": "uuid"
          },
          "user_id": {
            "type": "string",
            "description": "User ID of user associated with this session",
            "format": "uuid"
          },
          "agent_id": {
            "type": "string",
            "description": "Agent ID of agent associated with this session",
            "format": "uuid"
          },
          "situation": {
            "type": "string",
            "description": "A specific situation that sets the background for this session"
          },
          "summary": {
            "type": "string",
            "description": "(null at the beginning) - generated automatically after every interaction"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Session created at (RFC-3339 format)"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Session updated at (RFC-3339 format)"
          }
        },
        "required": [
          "id",
          "user_id",
          "agent_id"
        ]
      },
      "CreateUserRequest": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the user",
            "default": "User"
          },
          "about": {
            "type": "string",
            "description": "About the user"
          },
          "additional_information": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateAdditionalInfoRequest",
              "description": "Snippet that has information about the user"
            },
            "description": "List of additional info about user"
          }
        },
        "description": "A valid request payload for creating a user"
      },
      "CreateSessionRequest": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "description": "User ID of user to associate with this session"
          },
          "agent_id": {
            "type": "string",
            "description": "Agent ID of agent to associate with this session"
          },
          "situation": {
            "type": "string",
            "description": "A specific situation that sets the background for this session"
          }
        },
        "required": [
          "agent_id",
          "user_id"
        ],
        "description": "A valid request payload for creating a session"
      },
      "CreateAgentRequest": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the agent"
          },
          "about": {
            "type": "string",
            "description": "About the agent"
          },
          "instructions": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Instruction"
            },
            "description": "List of instructions for the agent"
          },
          "tools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tool"
            },
            "description": "A list of tools the model may call. Currently, only `function`s are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for."
          },
          "default_settings": {
            "$ref": "#/components/schemas/AgentDefaultSettings",
            "description": "Default model settings to start every session with"
          },
          "model": {
            "type": "string",
            "description": "Name of the model that the agent is supposed to use",
            "default": "julep-ai/samantha-1-turbo"
          },
          "additional_info": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateAdditionalInfoRequest",
              "description": "Snippet that has information about the agent"
            },
            "description": "List of additional info about agent"
          }
        },
        "required": [
          "name",
          "about",
          "model"
        ],
        "description": "A valid request payload for creating an agent"
      },
      "UpdateSessionRequest": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "properties": {
          "situation": {
            "type": "string",
            "description": "Updated situation for this session"
          }
        },
        "required": [
          "situation"
        ],
        "description": "A valid request payload for updating a session"
      },
      "UpdateAgentRequest": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "properties": {
          "about": {
            "type": "string",
            "description": "About the agent"
          },
          "instructions": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Instruction"
            },
            "description": "List of instructions for the agent"
          },
          "tools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tool"
            },
            "description": "List of tools available to this agent"
          },
          "name": {
            "type": "string",
            "description": "Name of the agent"
          },
          "model": {
            "type": "string",
            "description": "Name of the model that the agent is supposed to use"
          },
          "default_settings": {
            "$ref": "#/components/schemas/AgentDefaultSettings",
            "description": "Default model settings to start every session with"
          }
        },
        "description": "A valid request payload for updating an agent"
      },
      "UpdateUserRequest": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "properties": {
          "about": {
            "type": "string",
            "description": "About the user"
          },
          "name": {
            "type": "string",
            "description": "Name of the user"
          }
        },
        "description": "A valid request payload for updating a user"
      },
      "Suggestion": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string",
            "description": "Suggestion created at (RFC-3339 format)",
            "format": "date-time"
          },
          "target": {
            "type": "string",
            "enum": [
              "user",
              "agent"
            ],
            "description": "Whether the suggestion is for the `agent` or a `user`"
          },
          "content": {
            "type": "string",
            "description": "The content of the suggestion"
          },
          "message_id": {
            "type": "string",
            "description": "The message that produced it",
            "format": "uuid"
          },
          "session_id": {
            "type": "string",
            "description": "Session this suggestion belongs to",
            "format": "uuid"
          }
        },
        "required": [
          "message_id",
          "target",
          "content",
          "session_id"
        ]
      },
      "ChatMLMessage": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "user",
              "assistant",
              "system",
              "function_call"
            ],
            "description": "ChatML role (system|assistant|user|function_call)"
          },
          "content": {
            "type": "string",
            "description": "ChatML content"
          },
          "name": {
            "type": "string",
            "description": "ChatML name"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Message created at (RFC-3339 format)"
          },
          "id": {
            "type": "string",
            "description": "Message ID",
            "format": "uuid"
          }
        },
        "required": [
          "id",
          "created_at",
          "content",
          "role"
        ]
      },
      "InputChatMLMessage": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "user",
              "assistant",
              "system",
              "function_call"
            ],
            "description": "ChatML role (system|assistant|user|function_call)"
          },
          "content": {
            "type": "string",
            "description": "ChatML content",
            "default": ""
          },
          "name": {
            "type": "string",
            "description": "ChatML name"
          },
          "continue": {
            "type": "boolean",
            "default": false,
            "description": "Whether to continue this message or return a new one"
          }
        },
        "required": [
          "role",
          "content"
        ]
      },
      "ChatInputData": {
        "type": "object",
        "properties": {
          "messages": {
            "description": "A list of new input messages comprising the conversation so far.",
            "type": "array",
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/InputChatMLMessage"
            }
          },
          "tools": {
            "type": "array",
            "description": "(Advanced) List of tools that are provided in addition to agent's default set of tools. Functions of same name in agent set are overriden",
            "items": {
              "$ref": "#/components/schemas/Tool"
            }
          },
          "tool_choice": {
            "$ref": "#/components/schemas/ToolChoiceOption",
            "description": "Can be one of existing tools given to the agent earlier or the ones included in the request"
          }
        },
        "required": [
          "messages"
        ]
      },
      "NamedToolChoice": {
        "type": "object",
        "description": "Specifies a tool the model should use. Use to force the model to call a specific function.",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "function"
            ],
            "description": "The type of the tool. Currently, only `function` is supported."
          },
          "function": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the function to call."
              }
            },
            "required": [
              "name"
            ]
          }
        },
        "required": [
          "type",
          "function"
        ]
      },
      "ToolChoiceOption": {
        "description": "Controls which (if any) function is called by the model.\n`none` means the model will not call a function and instead generates a message.\n`auto` means the model can pick between generating a message or calling a function.\nSpecifying a particular function via `{\"type: \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that function.\n\n`none` is the default when no functions are present. `auto` is the default if functions are present.\n",
        "oneOf": [
          {
            "type": "string",
            "description": "`none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.\n",
            "enum": [
              "none",
              "auto"
            ]
          },
          {
            "$ref": "#/components/schemas/NamedToolChoice"
          }
        ],
        "type": "string"
      },
      "FunctionCallOption": {
        "type": "object",
        "description": "Specifying a particular function via `{\"name\": \"my_function\"}` forces the model to call that function.\n",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the function to call."
          }
        },
        "required": [
          "name"
        ]
      },
      "CompletionUsage": {
        "type": "object",
        "description": "Usage statistics for the completion request.",
        "properties": {
          "completion_tokens": {
            "type": "integer",
            "description": "Number of tokens in the generated completion."
          },
          "prompt_tokens": {
            "type": "integer",
            "description": "Number of tokens in the prompt."
          },
          "total_tokens": {
            "type": "integer",
            "description": "Total number of tokens used in the request (prompt + completion)."
          }
        },
        "required": [
          "prompt_tokens",
          "completion_tokens",
          "total_tokens"
        ]
      },
      "ChatResponse": {
        "type": "object",
        "description": "Represents a chat completion response returned by model, based on the provided input.",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier for the chat completion.",
            "format": "uuid"
          },
          "finish_reason": {
            "type": "string",
            "description": "The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence, `length` if the maximum number of tokens specified in the request was reached, `content_filter` if content was omitted due to a flag from our content filters, `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.",
            "enum": [
              "stop",
              "length",
              "tool_calls",
              "content_filter",
              "function_call"
            ]
          },
          "response": {
            "type": "array",
            "description": "A list of chat completion messages produced as a response.",
            "items": {
              "type": "array",
              "properties": {
                "items": {
                  "$ref": "#/components/schemas/ChatMLMessage"
                }
              },
              "items": {
                "$ref": "#/components/schemas/ChatMLMessage"
              }
            }
          },
          "usage": {
            "$ref": "#/components/schemas/CompletionUsage"
          }
        },
        "required": [
          "usage",
          "response",
          "finish_reason",
          "id"
        ]
      },
      "Belief": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "belief",
            "enum": [
              "belief"
            ],
            "description": "Type of memory (`belief`)"
          },
          "subject": {
            "type": "string",
            "format": "uuid",
            "description": "(Optional) ID of the subject user"
          },
          "content": {
            "type": "string",
            "description": "Content of the memory"
          },
          "rationale": {
            "type": "string",
            "description": "Rationale: Why did the model decide to form this memory"
          },
          "weight": {
            "type": "number",
            "default": 1,
            "exclusiveMinimum": true,
            "exclusiveMaximum": true,
            "minimum": 0,
            "maximum": 100,
            "description": "Weight (importance) of the memory on a scale of 0-100"
          },
          "sentiment": {
            "type": "number",
            "default": 0,
            "exclusiveMinimum": true,
            "minimum": -1,
            "exclusiveMaximum": true,
            "maximum": 1,
            "description": "Sentiment (valence) of the memory on a scale of -1 to 1"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Belief created at (RFC-3339 format)"
          },
          "id": {
            "type": "string",
            "description": "Belief id (UUID)",
            "format": "uuid"
          }
        },
        "required": [
          "type",
          "content",
          "created_at",
          "weight",
          "sentiment",
          "id"
        ]
      },
      "Episode": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "episode",
            "enum": [
              "episode"
            ],
            "description": "Type of memory (`episode`)"
          },
          "subject": {
            "type": "string",
            "format": "uuid",
            "description": "(Optional) ID of the subject user"
          },
          "content": {
            "type": "string",
            "description": "Content of the memory"
          },
          "weight": {
            "type": "number",
            "default": 1,
            "exclusiveMinimum": true,
            "exclusiveMaximum": true,
            "minimum": 0,
            "maximum": 100,
            "description": "Weight (importance) of the memory on a scale of 0-100"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Episode created at (RFC-3339 format)"
          },
          "last_accessed_at": {
            "type": "string",
            "format": "date-time",
            "description": "Episode last accessed at (RFC-3339 format)"
          },
          "happened_at": {
            "type": "string",
            "description": "Episode happened at (RFC-3339 format)",
            "format": "date-time"
          },
          "duration": {
            "type": "number",
            "description": "Duration of the episode (in seconds)",
            "exclusiveMinimum": true,
            "minimum": 0,
            "default": 0
          },
          "id": {
            "type": "string",
            "description": "Episode id (UUID)",
            "format": "uuid"
          }
        },
        "required": [
          "type",
          "content",
          "created_at",
          "happened_at",
          "weight",
          "last_accessed_at",
          "id"
        ]
      },
      "Memory": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Belief"
          },
          {
            "$ref": "#/components/schemas/Episode"
          },
          {
            "$ref": "#/components/schemas/Entity"
          }
        ]
      },
      "Entity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Entity id (UUID)",
            "format": "uuid"
          }
        },
        "description": "TBD",
        "required": [
          "id"
        ]
      },
      "ChatSettings": {
        "type": "object",
        "properties": {
          "frequency_penalty": {
            "type": "number",
            "default": 0,
            "minimum": -1,
            "maximum": 1,
            "nullable": true,
            "description": "(OpenAI-like) Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim."
          },
          "length_penalty": {
            "type": "number",
            "default": 1,
            "minimum": 0,
            "maximum": 2,
            "nullable": true,
            "description": "(Huggingface-like) Number between 0 and 2.0. 1.0 is neutral and values larger than that penalize number of tokens generated. "
          },
          "logit_bias": {
            "type": "object",
            "default": null,
            "nullable": true,
            "additionalProperties": {
              "type": "integer"
            },
            "description": "Modify the likelihood of specified tokens appearing in the completion.\n\nAccepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.\n",
            "properties": {}
          },
          "max_tokens": {
            "description": "The maximum number of tokens to generate in the chat completion.\n\nThe total length of input tokens and generated tokens is limited by the model's context length.\n",
            "type": "integer",
            "nullable": true
          },
          "presence_penalty": {
            "type": "number",
            "default": 0,
            "minimum": -1,
            "maximum": 1,
            "nullable": true,
            "description": "(OpenAI-like) Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim."
          },
          "repetition_penalty": {
            "type": "number",
            "default": 1,
            "minimum": 0,
            "maximum": 2,
            "nullable": true,
            "description": "(Huggingface-like) Number between 0 and 2.0. 1.0 is neutral and values larger than that penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim."
          },
          "response_format": {
            "type": "object",
            "description": "An object specifying the format that the model must output.\n\nSetting to `{ \"type\": \"json_object\" }` enables JSON mode, which guarantees the message the model generates is valid JSON.\n\n**Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.\n",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "text",
                  "json_object"
                ],
                "example": "json_object",
                "default": "text",
                "description": "Must be one of `text` or `json_object`."
              }
            }
          },
          "seed": {
            "type": "integer",
            "minimum": -9223372036854776000,
            "maximum": 9223372036854776000,
            "nullable": true,
            "description": "This feature is in Beta.\nIf specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.\nDeterminism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.\n"
          },
          "stop": {
            "description": "Up to 4 sequences where the API will stop generating further tokens.\n",
            "default": null,
            "oneOf": [
              {
                "type": "string",
                "nullable": true
              },
              {
                "type": "array",
                "minItems": 1,
                "maxItems": 4,
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "stream": {
            "description": "If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n",
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "temperature": {
            "type": "number",
            "minimum": 0,
            "maximum": 2,
            "default": 1,
            "example": 1,
            "nullable": true,
            "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic."
          },
          "top_p": {
            "type": "number",
            "minimum": 0,
            "maximum": 1,
            "default": 1,
            "example": 1,
            "nullable": true,
            "description": "Defaults to 1 An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or temperature but not both."
          }
        },
        "required": [
          "stream"
        ]
      },
      "AgentDefaultSettings": {
        "type": "object",
        "properties": {
          "frequency_penalty": {
            "type": "number",
            "default": 0,
            "minimum": -2,
            "maximum": 2,
            "nullable": true,
            "description": "(OpenAI-like) Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
            "exclusiveMinimum": true,
            "exclusiveMaximum": true
          },
          "length_penalty": {
            "type": "number",
            "default": 1,
            "minimum": 0,
            "maximum": 2,
            "nullable": true,
            "description": "(Huggingface-like) Number between 0 and 2.0. 1.0 is neutral and values larger than that penalize number of tokens generated. "
          },
          "presence_penalty": {
            "type": "number",
            "default": 0,
            "minimum": -1,
            "maximum": 1,
            "nullable": true,
            "description": "(OpenAI-like) Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim."
          },
          "repetition_penalty": {
            "type": "number",
            "default": 1,
            "minimum": 0,
            "maximum": 2,
            "nullable": true,
            "description": "(Huggingface-like) Number between 0 and 2.0. 1.0 is neutral and values larger than that penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim."
          },
          "temperature": {
            "type": "number",
            "minimum": 0,
            "maximum": 2,
            "default": 1,
            "example": 1,
            "nullable": true,
            "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic."
          },
          "top_p": {
            "type": "number",
            "minimum": 0,
            "maximum": 1,
            "default": 1,
            "example": 1,
            "nullable": true,
            "description": "Defaults to 1 An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or temperature but not both."
          }
        }
      },
      "ChatInput": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ChatInputData"
          },
          {
            "$ref": "#/components/schemas/ChatSettings"
          }
        ]
      },
      "AdditionalInfo": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title describing what this bit of information contains"
          },
          "content": {
            "type": "string",
            "description": "Information content"
          },
          "id": {
            "type": "string",
            "description": "ID of additional info doc"
          }
        },
        "required": [
          "title",
          "content",
          "id"
        ]
      },
      "CreateAdditionalInfoRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title describing what this bit of information contains"
          },
          "content": {
            "type": "string",
            "description": "Information content"
          }
        },
        "required": [
          "title",
          "content"
        ]
      }
    },
    "securitySchemes": {
      "http1": {
        "type": "apiKey",
        "scheme": "basic",
        "description": "API Key Authentication",
        "name": "Julep API Key",
        "in": "header"
      }
    },
    "parameters": {
      "session_id": {
        "in": "path",
        "required": false,
        "description": "",
        "schema": {
          "type": "string"
        }
      },
      "user_id": {
        "in": "path",
        "required": false,
        "description": "",
        "schema": {
          "type": "string"
        }
      },
      "agent_id": {
        "in": "path",
        "required": false,
        "description": "",
        "schema": {
          "type": "string"
        }
      },
      "message_id": {
        "in": "path",
        "required": false,
        "description": "",
        "schema": {
          "type": "string"
        }
      },
      "additional_info_id": {
        "in": "path",
        "required": false,
        "description": "",
        "schema": {
          "type": "string"
        }
      },
      "memory_id": {
        "in": "query",
        "required": false,
        "description": "",
        "schema": {
          "type": "string"
        }
      }
    }
  },
  "security": [
    {
      "http1": []
    }
  ]
}