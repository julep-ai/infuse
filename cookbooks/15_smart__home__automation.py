# -*- coding: utf-8 -*-
"""Smart _Home _Automation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YWmfcFC_iAGCC8McnGowynjS77HtLpyf
"""

# -*- coding: utf-8 -*-
"""Smart_Home_Automation_Workflow.py

Automatically generated for home automation tasks.

"""

import uuid
import yaml
import time
from julep import Client

AGENT_UUID = uuid.uuid4()
DEVICE_CONTROL_TASK_UUID = uuid.uuid4()

api_key =  ""  # Your API key here
client = Client(api_key=api_key, environment="dev")

agent = client.agents.create_or_update(
    agent_id=AGENT_UUID,
    name="Smart Home Automation Assistant",
    about="An AI agent specialized in automating smart home workflows.",
    model="gpt-4o",
)

device_control_task_def = yaml.safe_load("""
name: Device Control

input_schema:
  type: object
  properties:
    device_id:
      type: string
    action:
      type: string

main:
- prompt:
  - role: system
    content: >-
      You are a smart home device controller. Perform the following action:
      Device ID: {{inputs[0].device_id}}
      Action: {{inputs[0].action}}

      Confirm the action status.
  unwrap: true

- evaluate:
    status: "success"  # Simulating a successful action

- return:
    status: _
""")

device_control_task = client.tasks.create_or_update(
    task_id=DEVICE_CONTROL_TASK_UUID,
    agent_id=AGENT_UUID,
    **device_control_task_def
)

def control_device(device_id, action):
    execution = client.executions.create(
        task_id=DEVICE_CONTROL_TASK_UUID,
        input={
            "device_id": device_id,
            "action": action
        }
    )
    time.sleep(2)
    result = client.executions.get(execution.id)
    return client.executions.transitions.list(execution_id=result.id).items[0].output

print("Demonstrating Smart Home Automation Workflow:")

device_id = "light_living_room"
action = "turn_on"

action_result = control_device(device_id, action)
print(f"Action Result: {action_result}")





