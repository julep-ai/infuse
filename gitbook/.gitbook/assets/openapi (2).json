{
  "openapi": "3.0.3",
  "info": {
    "title": "Julep Agents API",
    "description": "This is a sample description about this spec.",
    "termsOfService": "",
    "contact": {
      "email": ""
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "externalDocs": {
    "description": "Find out more about spec",
    "url": ""
  },
  "servers": [
    {
      "url": "https://api.julep.ai",
      "description": "",
      "varibles": {}
    }
  ],
  "tags": [
    {
      "name": "Default",
      "description": ""
    }
  ],
  "paths": {
    "/sessions": {
      "post": {
        "summary": "Create a new session",
        "description": "",
        "operationId": "CreateSession",
        "tags": [],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSessionRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List sessions",
        "description": "",
        "operationId": "ListSessions",
        "tags": [],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "",
            "schema": {
              "type": "integer",
              "exclusiveMinimum": true,
              "exclusiveMaximum": true,
              "default": 10,
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "",
            "schema": {
              "type": "integer",
              "exclusiveMinimum": true,
              "default": 0,
              "minimum": 0
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$schema": "http://json-schema.org/draft-04/schema#",
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Session"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "post": {
        "summary": "Create a new user",
        "description": "",
        "operationId": "CreateUser",
        "tags": [],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List users",
        "description": "",
        "operationId": "ListUsers",
        "tags": [],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "",
            "schema": {
              "type": "integer",
              "default": 10,
              "exclusiveMinimum": true,
              "minimum": 1,
              "exclusiveMaximum": true,
              "maximum": 100
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$schema": "http://json-schema.org/draft-04/schema#",
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/agents": {
      "post": {
        "summary": "Create a new agent",
        "description": "",
        "operationId": "CreateAgent",
        "tags": [],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAgentRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Agent"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List agents",
        "description": "",
        "operationId": "ListAgents",
        "tags": [],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "",
            "schema": {
              "type": "integer",
              "default": 10,
              "exclusiveMinimum": true,
              "minimum": 1,
              "exclusiveMaximum": true,
              "maximum": 100
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "",
            "schema": {
              "type": "integer",
              "exclusiveMinimum": true,
              "default": 0,
              "minimum": 0
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$schema": "http://json-schema.org/draft-04/schema#",
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Agent"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sessions/{session_id}": {
      "get": {
        "summary": "Get details of the session",
        "description": "",
        "operationId": "GetSession",
        "tags": [],
        "parameters": [],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete session",
        "description": "",
        "operationId": "DeleteSession",
        "tags": [],
        "parameters": [],
        "requestBody": {},
        "responses": {
          "202": {}
        }
      },
      "put": {
        "summary": "Update session parameters",
        "description": "",
        "operationId": "UpdateSession",
        "tags": [],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSessionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "session_id",
          "description": "",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ]
    },
    "/sessions/{session_id}/suggestions": {
      "get": {
        "summary": "Get autogenerated suggestions for session user and agent",
        "description": "",
        "operationId": "GetSuggestions",
        "tags": [],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "",
            "schema": {
              "type": "integer",
              "default": 10,
              "exclusiveMinimum": true,
              "exclusiveMaximum": true,
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "",
            "schema": {
              "type": "integer",
              "default": 0,
              "exclusiveMinimum": true,
              "minimum": 0
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$schema": "http://json-schema.org/draft-04/schema#",
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Suggestion"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "session_id",
          "description": "",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ]
    },
    "/sessions/{session_id}/history": {
      "get": {
        "summary": "Get all messages in a session",
        "description": "",
        "operationId": "GetHistory",
        "tags": [],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "",
            "schema": {
              "type": "integer",
              "default": 10,
              "exclusiveMinimum": true,
              "exclusiveMaximum": true,
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "",
            "schema": {
              "type": "integer",
              "default": 0,
              "exclusiveMinimum": true,
              "minimum": 0
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$schema": "http://json-schema.org/draft-04/schema#",
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ChatMLMessage"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "session_id",
          "description": "",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ]
    },
    "/sessions/{session_id}/chat": {
      "parameters": [
        {
          "in": "path",
          "name": "session_id",
          "description": "",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Interact with the session",
        "description": "",
        "operationId": "Chat",
        "tags": [],
        "parameters": [
          {
            "in": "header",
            "name": "Accept",
            "description": "",
            "schema": {
              "type": "string",
              "default": "application/json",
              "enum": [
                "application/json",
                "text/event-stream"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatResponse"
                }
              }
            }
          }
        }
      }
    },
    "/agents/{agent_id}/memories": {
      "get": {
        "summary": "Get memories of the agent",
        "description": "",
        "operationId": "",
        "tags": [],
        "parameters": [],
        "requestBody": {},
        "responses": {}
      },
      "parameters": [
        {
          "in": "path",
          "name": "agent_id",
          "description": "",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ]
    },
    "/users/{user_id}": {
      "get": {
        "summary": "Get details of the user",
        "description": "",
        "operationId": "GetUser",
        "tags": [],
        "parameters": [],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete user",
        "description": "",
        "operationId": "DeleteUser",
        "tags": [],
        "parameters": [],
        "requestBody": {},
        "responses": {
          "202": {}
        }
      },
      "put": {
        "summary": "Update user parameters",
        "description": "",
        "operationId": "UpdateUser",
        "tags": [],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "user_id",
          "description": "",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ]
    },
    "/agents/{agent_id}": {
      "get": {
        "summary": "Get details of the agent",
        "description": "",
        "operationId": "GetAgent",
        "tags": [],
        "parameters": [],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Agent"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete agent",
        "description": "",
        "operationId": "DeleteAgent",
        "tags": [],
        "parameters": [],
        "requestBody": {},
        "responses": {
          "202": {}
        }
      },
      "put": {
        "summary": "Update agent parameters",
        "description": "",
        "operationId": "UpdateAgent",
        "tags": [],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAgentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Agent"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "agent_id",
          "description": "",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ]
    }
  },
  "components": {
    "schemas": {
      "User": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the user",
            "default": "User"
          },
          "about": {
            "type": "string",
            "description": "About the user"
          },
          "additional_information": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "description": "Title of the snippet"
                },
                "content": {
                  "type": "string",
                  "description": "Content of the snippet"
                }
              },
              "description": "Snippet that has information about the user",
              "required": [
                "title",
                "content"
              ]
            },
            "description": "List of large relevant snippets"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "Agent": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the agent"
          },
          "about": {
            "type": "string",
            "description": "About the agent"
          },
          "instructions": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Instruction for the agent"
            },
            "description": "List of instructions for the agent"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "tools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tool"
            }
          },
          "id": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "about",
          "id"
        ]
      },
      "FunctionParameters": {
        "type": "object",
        "description": "The parameters the functions accepts, described as a JSON Schema object.",
        "additionalProperties": true,
        "properties": {}
      },
      "FunctionDef": {
        "type": "object",
        "deprecated": true,
        "properties": {
          "description": {
            "type": "string",
            "description": "A description of what the function does, used by the model to choose when and how to call the function."
          },
          "name": {
            "type": "string",
            "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
          },
          "parameters": {
            "$ref": "#/components/schemas/FunctionParameters"
          }
        },
        "required": [
          "name",
          "parameters"
        ]
      },
      "Tool": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "function",
              "webhook"
            ]
          },
          "definition": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/FunctionDef"
              }
            ]
          }
        },
        "required": [
          "type",
          "definition"
        ]
      },
      "Session": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "agent_id": {
            "type": "string"
          },
          "situation": {
            "type": "string"
          },
          "summary": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id"
        ]
      },
      "CreateUserRequest": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the user",
            "default": "User"
          },
          "about": {
            "type": "string",
            "description": "About the user"
          },
          "additional_information": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "description": "Title of the snippet"
                },
                "content": {
                  "type": "string",
                  "description": "Content of the snippet"
                }
              },
              "description": "Snippet that has information about the user",
              "required": [
                "title",
                "content"
              ]
            },
            "description": "List of large relevant snippets"
          }
        }
      },
      "CreateSessionRequest": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string"
          },
          "agent_id": {
            "type": "string"
          },
          "situation": {
            "type": "string"
          }
        },
        "required": [
          "agent_id",
          "user_id"
        ]
      },
      "CreateAgentRequest": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the agent"
          },
          "about": {
            "type": "string",
            "description": "About the agent"
          },
          "instructions": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Instruction"
            },
            "description": "List of instructions for the agent"
          },
          "tools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tool"
            }
          }
        },
        "required": [
          "name",
          "about"
        ]
      },
      "UpdateSessionRequest": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "properties": {
          "situation": {
            "type": "string"
          }
        },
        "required": [
          "situation"
        ]
      },
      "UpdateAgentRequest": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "properties": {
          "about": {
            "type": "string",
            "description": "About the agent"
          },
          "instructions": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Instruction"
            },
            "description": "List of instructions for the agent"
          },
          "tools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tool"
            }
          }
        }
      },
      "UpdateUserRequest": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "properties": {
          "about": {
            "type": "string",
            "description": "About the user"
          },
          "additional_information": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "description": "Title of the snippet"
                },
                "content": {
                  "type": "string",
                  "description": "Content of the snippet"
                }
              },
              "description": "Snippet that has information about the user",
              "required": [
                "title",
                "content"
              ]
            },
            "description": "List of large relevant snippets"
          }
        }
      },
      "Suggestion": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "target": {
            "type": "string",
            "enum": [
              "user",
              "agent"
            ],
            "description": "Whether the suggestion is for the `agent` or a `user`"
          },
          "content": {
            "type": "string",
            "description": "The content of the suggestion"
          },
          "target_id": {
            "type": "string"
          },
          "message_id": {
            "type": "string",
            "description": "The message that produced it"
          }
        },
        "required": [
          "message_id",
          "target_id",
          "target",
          "content",
          "created_at"
        ]
      },
      "ChatMLMessage": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "user",
              "assistant",
              "system",
              "function_call"
            ]
          },
          "content": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "content",
          "role"
        ]
      },
      "InputChatMLMessage": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "user",
              "assistant",
              "system",
              "function_call"
            ]
          },
          "content": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "continue": {
            "type": "boolean",
            "default": false
          }
        },
        "required": [
          "role"
        ]
      },
      "ChatInput": {
        "type": "object",
        "properties": {
          "messages": {
            "description": "A list of new input messages comprising the conversation so far.",
            "type": "array",
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/InputChatMLMessage"
            }
          },
          "frequency_penalty": {
            "type": "number",
            "default": 0,
            "minimum": -1,
            "maximum": 1,
            "nullable": true
          },
          "length_penalty": {
            "type": "number",
            "default": 1,
            "minimum": 0,
            "maximum": 2,
            "nullable": true
          },
          "logit_bias": {
            "type": "object",
            "default": null,
            "nullable": true,
            "additionalProperties": {
              "type": "integer"
            },
            "description": "Modify the likelihood of specified tokens appearing in the completion.\n\nAccepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.\n",
            "properties": {}
          },
          "max_tokens": {
            "description": "The maximum number of tokens to generate in the chat completion.\n\nThe total length of input tokens and generated tokens is limited by the model's context length.\n",
            "type": "integer",
            "nullable": true
          },
          "presence_penalty": {
            "type": "number",
            "default": 0,
            "minimum": -1,
            "maximum": 1,
            "nullable": true
          },
          "repetition_penalty": {
            "type": "number",
            "default": 1,
            "minimum": 0,
            "maximum": 2,
            "nullable": true
          },
          "response_format": {
            "type": "object",
            "description": "An object specifying the format that the model must output.\n\nSetting to `{ \"type\": \"json_object\" }` enables JSON mode, which guarantees the message the model generates is valid JSON.\n\n**Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.\n",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "text",
                  "json_object"
                ],
                "example": "json_object",
                "default": "text",
                "description": "Must be one of `text` or `json_object`."
              }
            }
          },
          "seed": {
            "type": "integer",
            "minimum": -9223372036854776000,
            "maximum": 9223372036854776000,
            "nullable": true,
            "description": "This feature is in Beta.\nIf specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.\nDeterminism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.\n"
          },
          "stop": {
            "description": "Up to 4 sequences where the API will stop generating further tokens.\n",
            "default": null,
            "oneOf": [
              {
                "type": "string",
                "nullable": true
              },
              {
                "type": "array",
                "minItems": 1,
                "maxItems": 4,
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "stream": {
            "description": "If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n",
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "temperature": {
            "type": "number",
            "minimum": 0,
            "maximum": 2,
            "default": 1,
            "example": 1,
            "nullable": true
          },
          "top_p": {
            "type": "number",
            "minimum": 0,
            "maximum": 1,
            "default": 1,
            "example": 1,
            "nullable": true
          },
          "tools": {
            "type": "array",
            "description": "A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for.\n",
            "items": {
              "$ref": "#/components/schemas/Tool"
            }
          },
          "tool_choice": {
            "$ref": "#/components/schemas/ToolChoiceOption"
          }
        },
        "required": [
          "messages",
          "stream"
        ]
      },
      "NamedToolChoice": {
        "type": "object",
        "description": "Specifies a tool the model should use. Use to force the model to call a specific function.",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "function"
            ],
            "description": "The type of the tool. Currently, only `function` is supported."
          },
          "function": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the function to call."
              }
            },
            "required": [
              "name"
            ]
          }
        },
        "required": [
          "type",
          "function"
        ]
      },
      "ToolChoiceOption": {
        "description": "Controls which (if any) function is called by the model.\n`none` means the model will not call a function and instead generates a message.\n`auto` means the model can pick between generating a message or calling a function.\nSpecifying a particular function via `{\"type: \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that function.\n\n`none` is the default when no functions are present. `auto` is the default if functions are present.\n",
        "oneOf": [
          {
            "type": "string",
            "description": "`none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.\n",
            "enum": [
              "none",
              "auto"
            ]
          },
          {
            "$ref": "#/components/schemas/NamedToolChoice"
          }
        ],
        "type": "string"
      },
      "FunctionCallOption": {
        "type": "object",
        "description": "Specifying a particular function via `{\"name\": \"my_function\"}` forces the model to call that function.\n",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the function to call."
          }
        },
        "required": [
          "name"
        ]
      },
      "CompletionUsage": {
        "type": "object",
        "description": "Usage statistics for the completion request.",
        "properties": {
          "completion_tokens": {
            "type": "integer",
            "description": "Number of tokens in the generated completion."
          },
          "prompt_tokens": {
            "type": "integer",
            "description": "Number of tokens in the prompt."
          },
          "total_tokens": {
            "type": "integer",
            "description": "Total number of tokens used in the request (prompt + completion)."
          }
        },
        "required": [
          "prompt_tokens",
          "completion_tokens",
          "total_tokens"
        ]
      },
      "ChatResponse": {
        "type": "object",
        "description": "Represents a chat completion response returned by model, based on the provided input.",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier for the chat completion."
          },
          "finish_reason": {
            "type": "string",
            "description": "The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence, `length` if the maximum number of tokens specified in the request was reached, `content_filter` if content was omitted due to a flag from our content filters, `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.",
            "enum": [
              "stop",
              "length",
              "tool_calls",
              "content_filter",
              "function_call"
            ]
          },
          "response": {
            "type": "array",
            "description": "A list of chat completion messages produced as a response.",
            "items": {
              "type": "array",
              "properties": {
                "items": {
                  "$ref": "#/components/schemas/ChatMLMessage"
                }
              },
              "items": {
                "$ref": "#/components/schemas/ChatMLMessage"
              }
            }
          },
          "usage": {
            "$ref": "#/components/schemas/CompletionUsage"
          }
        }
      }
    },
    "securitySchemes": {
      "http1": {
        "type": "apiKey",
        "scheme": "basic",
        "description": "API Key Authentication",
        "name": "Julep API Key",
        "in": "header"
      }
    },
    "parameters": {
      "session_id": {
        "in": "path",
        "required": false,
        "description": "",
        "schema": {
          "type": "string"
        }
      },
      "user_id": {
        "in": "path",
        "required": false,
        "description": "",
        "schema": {
          "type": "string"
        }
      },
      "agent_id": {
        "in": "path",
        "required": false,
        "description": "",
        "schema": {
          "type": "string"
        }
      },
      "message_id": {
        "in": "path",
        "required": false,
        "description": "",
        "schema": {
          "type": "string"
        }
      }
    }
  },
  "security": [
    {
      "http1": []
    }
  ]
}